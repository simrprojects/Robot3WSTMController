
praca_przejsciowa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003dfc  20000010  08002e80  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003e0c  08002e80  00023e0c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00022b96  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e0a  00000000  00000000  00042bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000bd71  00000000  00000000  000469de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f50  00000000  00000000  00052750  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001588  00000000  00000000  000536a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a093  00000000  00000000  00054c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006eae  00000000  00000000  0005ecbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00065b69  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c50  00000000  00000000  00065be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000010 	.word	0x20000010
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08002e0c 	.word	0x08002e0c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000014 	.word	0x20000014
 80002dc:	08002e0c 	.word	0x08002e0c

080002e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002e0:	b510      	push	{r4, lr}
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e2:	2003      	movs	r0, #3
 80002e4:	f000 f81e 	bl	8000324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80002e8:	2000      	movs	r0, #0
 80002ea:	f002 fcc3 	bl	8002c74 <HAL_InitTick>
 80002ee:	4604      	mov	r4, r0
 80002f0:	b918      	cbnz	r0, 80002fa <HAL_Init+0x1a>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80002f2:	f002 fc7f 	bl	8002bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80002f6:	4620      	mov	r0, r4
 80002f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80002fa:	2401      	movs	r4, #1
 80002fc:	e7fb      	b.n	80002f6 <HAL_Init+0x16>
	...

08000300 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000300:	4a03      	ldr	r2, [pc, #12]	; (8000310 <HAL_IncTick+0x10>)
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <HAL_IncTick+0x14>)
 8000304:	6811      	ldr	r1, [r2, #0]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	440b      	add	r3, r1
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	2000002c 	.word	0x2000002c
 8000314:	20000000 	.word	0x20000000

08000318 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <HAL_GetTick+0x8>)
 800031a:	6818      	ldr	r0, [r3, #0]
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	2000002c 	.word	0x2000002c

08000324 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000326:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000328:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800032a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800032e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000332:	041b      	lsls	r3, r3, #16
 8000334:	0c1b      	lsrs	r3, r3, #16
 8000336:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800033a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800033e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000340:	60d3      	str	r3, [r2, #12]
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034a:	b530      	push	{r4, r5, lr}
 800034c:	68dc      	ldr	r4, [r3, #12]
 800034e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000352:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	2b04      	cmp	r3, #4
 800035a:	bf28      	it	cs
 800035c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000360:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000364:	bf8c      	ite	hi
 8000366:	3c03      	subhi	r4, #3
 8000368:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800036a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800036e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f103 33ff 	add.w	r3, r3, #4294967295
 8000374:	ea01 0103 	and.w	r1, r1, r3
 8000378:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037c:	fa05 f404 	lsl.w	r4, r5, r4
 8000380:	f104 34ff 	add.w	r4, r4, #4294967295
 8000384:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000388:	ea42 0201 	orr.w	r2, r2, r1
 800038c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000390:	db07      	blt.n	80003a2 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800039c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80003a0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	f000 000f 	and.w	r0, r0, #15
 80003a6:	b2d2      	uxtb	r2, r2
 80003a8:	4b02      	ldr	r3, [pc, #8]	; (80003b4 <HAL_NVIC_SetPriority+0x6c>)
 80003aa:	541a      	strb	r2, [r3, r0]
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	bf00      	nop
 80003b0:	e000ed00 	.word	0xe000ed00
 80003b4:	e000ed14 	.word	0xe000ed14

080003b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80003b8:	2800      	cmp	r0, #0
 80003ba:	db08      	blt.n	80003ce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003bc:	0942      	lsrs	r2, r0, #5
 80003be:	2301      	movs	r3, #1
 80003c0:	f000 001f 	and.w	r0, r0, #31
 80003c4:	fa03 f000 	lsl.w	r0, r3, r0
 80003c8:	4b01      	ldr	r3, [pc, #4]	; (80003d0 <HAL_NVIC_EnableIRQ+0x18>)
 80003ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003ce:	4770      	bx	lr
 80003d0:	e000e100 	.word	0xe000e100

080003d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003d4:	3801      	subs	r0, #1
 80003d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003da:	d20a      	bcs.n	80003f2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003de:	21f0      	movs	r1, #240	; 0xf0
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003e2:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ea:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ec:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000400:	4b04      	ldr	r3, [pc, #16]	; (8000414 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000402:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	bf0c      	ite	eq
 8000408:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800040c:	f022 0204 	bicne.w	r2, r2, #4
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	4770      	bx	lr
 8000414:	e000e010 	.word	0xe000e010

08000418 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800041c:	680b      	ldr	r3, [r1, #0]
{
 800041e:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000420:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80005e4 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000424:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000428:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800042a:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 800042c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80005e8 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000430:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000432:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000434:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000436:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 800043a:	42af      	cmp	r7, r5
 800043c:	f040 80b7 	bne.w	80005ae <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000440:	684a      	ldr	r2, [r1, #4]
 8000442:	f022 0610 	bic.w	r6, r2, #16
 8000446:	2e02      	cmp	r6, #2
 8000448:	d116      	bne.n	8000478 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800044a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800044e:	f003 0b07 	and.w	fp, r3, #7
 8000452:	f04f 0e0f 	mov.w	lr, #15
 8000456:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800045a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800045e:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000462:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000466:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800046a:	690c      	ldr	r4, [r1, #16]
 800046c:	fa04 f40b 	lsl.w	r4, r4, fp
 8000470:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000474:	f8ca 4020 	str.w	r4, [sl, #32]
 8000478:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800047c:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 800047e:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000482:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000486:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800048a:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800048c:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000490:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000492:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000494:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000498:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 800049c:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004a0:	d810      	bhi.n	80004c4 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 80004a2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80004a4:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80004a8:	68ce      	ldr	r6, [r1, #12]
 80004aa:	fa06 fe0a 	lsl.w	lr, r6, sl
 80004ae:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80004b2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80004b4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004b6:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80004ba:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80004be:	409e      	lsls	r6, r3
 80004c0:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 80004c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80004c4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80004c6:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80004c8:	688e      	ldr	r6, [r1, #8]
 80004ca:	fa06 f60a 	lsl.w	r6, r6, sl
 80004ce:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80004d0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004d2:	00d4      	lsls	r4, r2, #3
 80004d4:	d56b      	bpl.n	80005ae <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d6:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80004da:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004de:	f003 0703 	and.w	r7, r3, #3
 80004e2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	f044 0402 	orr.w	r4, r4, #2
 80004ea:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80004ee:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f0:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80004f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004f8:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80004fc:	f004 0402 	and.w	r4, r4, #2
 8000500:	9403      	str	r4, [sp, #12]
 8000502:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000504:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000508:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800050c:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000510:	4c33      	ldr	r4, [pc, #204]	; (80005e0 <HAL_GPIO_Init+0x1c8>)
 8000512:	42a0      	cmp	r0, r4
 8000514:	d052      	beq.n	80005bc <HAL_GPIO_Init+0x1a4>
 8000516:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800051a:	42a0      	cmp	r0, r4
 800051c:	d050      	beq.n	80005c0 <HAL_GPIO_Init+0x1a8>
 800051e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000522:	42a0      	cmp	r0, r4
 8000524:	d04e      	beq.n	80005c4 <HAL_GPIO_Init+0x1ac>
 8000526:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800052a:	42a0      	cmp	r0, r4
 800052c:	d04c      	beq.n	80005c8 <HAL_GPIO_Init+0x1b0>
 800052e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000532:	42a0      	cmp	r0, r4
 8000534:	d04a      	beq.n	80005cc <HAL_GPIO_Init+0x1b4>
 8000536:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800053a:	42a0      	cmp	r0, r4
 800053c:	d048      	beq.n	80005d0 <HAL_GPIO_Init+0x1b8>
 800053e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000542:	42a0      	cmp	r0, r4
 8000544:	d046      	beq.n	80005d4 <HAL_GPIO_Init+0x1bc>
 8000546:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800054a:	42a0      	cmp	r0, r4
 800054c:	d044      	beq.n	80005d8 <HAL_GPIO_Init+0x1c0>
 800054e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000552:	42a0      	cmp	r0, r4
 8000554:	d042      	beq.n	80005dc <HAL_GPIO_Init+0x1c4>
 8000556:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800055a:	42a0      	cmp	r0, r4
 800055c:	bf14      	ite	ne
 800055e:	240a      	movne	r4, #10
 8000560:	2409      	moveq	r4, #9
 8000562:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000564:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000566:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800056a:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800056c:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000570:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000574:	bf54      	ite	pl
 8000576:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000578:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800057a:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 800057c:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000580:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000584:	bf54      	ite	pl
 8000586:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000588:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800058a:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800058c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000590:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000594:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000598:	bf54      	ite	pl
 800059a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800059c:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800059e:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80005a0:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 80005a2:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 80005a4:	bf54      	ite	pl
 80005a6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80005a8:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 80005aa:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80005ae:	3301      	adds	r3, #1
 80005b0:	2b10      	cmp	r3, #16
 80005b2:	f47f af3d 	bne.w	8000430 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 80005b6:	b005      	add	sp, #20
 80005b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80005bc:	2400      	movs	r4, #0
 80005be:	e7d0      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005c0:	2401      	movs	r4, #1
 80005c2:	e7ce      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005c4:	2402      	movs	r4, #2
 80005c6:	e7cc      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005c8:	2403      	movs	r4, #3
 80005ca:	e7ca      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005cc:	2404      	movs	r4, #4
 80005ce:	e7c8      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005d0:	2405      	movs	r4, #5
 80005d2:	e7c6      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005d4:	2406      	movs	r4, #6
 80005d6:	e7c4      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005d8:	2407      	movs	r4, #7
 80005da:	e7c2      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005dc:	2408      	movs	r4, #8
 80005de:	e7c0      	b.n	8000562 <HAL_GPIO_Init+0x14a>
 80005e0:	58020000 	.word	0x58020000
 80005e4:	58024400 	.word	0x58024400
 80005e8:	58000080 	.word	0x58000080

080005ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005ec:	b10a      	cbz	r2, 80005f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80005ee:	8301      	strh	r1, [r0, #24]
 80005f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80005f2:	8341      	strh	r1, [r0, #26]
 80005f4:	4770      	bx	lr

080005f6 <HAL_I2C_Init>:
  * @param  hi2c: Pointer to a I2C_HandleTypeDef structure that contains
  *               the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80005f6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80005f8:	4604      	mov	r4, r0
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d04a      	beq.n	8000694 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80005fe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000602:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000606:	b91b      	cbnz	r3, 8000610 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000608:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800060c:	f002 fa4e 	bl	8002aac <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000610:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000612:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000614:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000618:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f022 0201 	bic.w	r2, r2, #1
 8000622:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000624:	6862      	ldr	r2, [r4, #4]
 8000626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800062a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	68a2      	ldr	r2, [r4, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000636:	d124      	bne.n	8000682 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000638:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800063c:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800063e:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000640:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000642:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000644:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800064c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000654:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000656:	6922      	ldr	r2, [r4, #16]
 8000658:	430a      	orrs	r2, r1
 800065a:	69a1      	ldr	r1, [r4, #24]
 800065c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000660:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000662:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000664:	69e2      	ldr	r2, [r4, #28]
 8000666:	430a      	orrs	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f042 0201 	orr.w	r2, r2, #1
 8000670:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000672:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000674:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000676:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800067a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800067c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000680:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000682:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000686:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000688:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800068a:	d1d8      	bne.n	800063e <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800068c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	e7d4      	b.n	800063e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000694:	2001      	movs	r0, #1
}
 8000696:	bd10      	pop	{r4, pc}

08000698 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000698:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	2a20      	cmp	r2, #32
{
 80006a0:	b510      	push	{r4, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 80006a2:	d11d      	bne.n	80006e0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80006a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d019      	beq.n	80006e0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80006ac:	2324      	movs	r3, #36	; 0x24
 80006ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80006b2:	6803      	ldr	r3, [r0, #0]
 80006b4:	681c      	ldr	r4, [r3, #0]
 80006b6:	f024 0401 	bic.w	r4, r4, #1
 80006ba:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80006bc:	681c      	ldr	r4, [r3, #0]
 80006be:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80006c2:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80006c4:	681c      	ldr	r4, [r3, #0]
 80006c6:	4321      	orrs	r1, r4
 80006c8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	f041 0101 	orr.w	r1, r1, #1
 80006d0:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80006d2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80006d4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80006d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80006dc:	4618      	mov	r0, r3
 80006de:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80006e0:	2002      	movs	r0, #2
  }
}
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *               the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter: Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80006e4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if(hi2c->State == HAL_I2C_STATE_READY)
 80006e6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 80006ea:	b2e4      	uxtb	r4, r4
 80006ec:	2c20      	cmp	r4, #32
 80006ee:	d11c      	bne.n	800072a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80006f0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d018      	beq.n	800072a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80006f8:	2324      	movs	r3, #36	; 0x24
 80006fa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80006fe:	6803      	ldr	r3, [r0, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	f022 0201 	bic.w	r2, r2, #1
 8000706:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000708:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800070a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800070e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000712:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	f042 0201 	orr.w	r2, r2, #1
 800071a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800071c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800071e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000722:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000726:	4618      	mov	r0, r3
 8000728:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800072a:	2002      	movs	r0, #2
  }
}
 800072c:	bd10      	pop	{r4, pc}
	...

08000730 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000732:	6803      	ldr	r3, [r0, #0]
{
 8000734:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000736:	07d8      	lsls	r0, r3, #31
 8000738:	d45c      	bmi.n	80007f4 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	0799      	lsls	r1, r3, #30
 800073e:	f100 80af 	bmi.w	80008a0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000742:	682b      	ldr	r3, [r5, #0]
 8000744:	06d9      	lsls	r1, r3, #27
 8000746:	d525      	bpl.n	8000794 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000748:	4bac      	ldr	r3, [pc, #688]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000750:	2a08      	cmp	r2, #8
 8000752:	d00b      	beq.n	800076c <HAL_RCC_OscConfig+0x3c>
 8000754:	691a      	ldr	r2, [r3, #16]
 8000756:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800075a:	2a18      	cmp	r2, #24
 800075c:	f040 80f7 	bne.w	800094e <HAL_RCC_OscConfig+0x21e>
 8000760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000762:	f003 0303 	and.w	r3, r3, #3
 8000766:	2b01      	cmp	r3, #1
 8000768:	f040 80f1 	bne.w	800094e <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800076c:	4ba3      	ldr	r3, [pc, #652]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	05d2      	lsls	r2, r2, #23
 8000772:	d502      	bpl.n	800077a <HAL_RCC_OscConfig+0x4a>
 8000774:	69ea      	ldr	r2, [r5, #28]
 8000776:	2a80      	cmp	r2, #128	; 0x80
 8000778:	d153      	bne.n	8000822 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800077a:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800077c:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000780:	fa92 f2a2 	rbit	r2, r2
 8000784:	fab2 f182 	clz	r1, r2
 8000788:	6a2a      	ldr	r2, [r5, #32]
 800078a:	408a      	lsls	r2, r1
 800078c:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000790:	430a      	orrs	r2, r1
 8000792:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000794:	682b      	ldr	r3, [r5, #0]
 8000796:	0719      	lsls	r1, r3, #28
 8000798:	f100 810b 	bmi.w	80009b2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	069a      	lsls	r2, r3, #26
 80007a0:	f100 8130 	bmi.w	8000a04 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	075c      	lsls	r4, r3, #29
 80007a8:	d51e      	bpl.n	80007e8 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80007aa:	4c95      	ldr	r4, [pc, #596]	; (8000a00 <HAL_RCC_OscConfig+0x2d0>)
 80007ac:	6823      	ldr	r3, [r4, #0]
 80007ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b2:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80007b4:	f7ff fdb0 	bl	8000318 <HAL_GetTick>
 80007b8:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80007ba:	6823      	ldr	r3, [r4, #0]
 80007bc:	05da      	lsls	r2, r3, #23
 80007be:	f140 8146 	bpl.w	8000a4e <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c2:	68ab      	ldr	r3, [r5, #8]
 80007c4:	4c8d      	ldr	r4, [pc, #564]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f040 8148 	bne.w	8000a5c <HAL_RCC_OscConfig+0x32c>
 80007cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d4:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80007d8:	f7ff fd9e 	bl	8000318 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007dc:	4e87      	ldr	r6, [pc, #540]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80007de:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007e0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80007e2:	079b      	lsls	r3, r3, #30
 80007e4:	f140 8160 	bpl.w	8000aa8 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	f040 8163 	bne.w	8000ab6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80007f0:	2000      	movs	r0, #0
 80007f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80007f4:	4b81      	ldr	r3, [pc, #516]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 80007f6:	691a      	ldr	r2, [r3, #16]
 80007f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80007fc:	2a10      	cmp	r2, #16
 80007fe:	d009      	beq.n	8000814 <HAL_RCC_OscConfig+0xe4>
 8000800:	691a      	ldr	r2, [r3, #16]
 8000802:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000806:	2a18      	cmp	r2, #24
 8000808:	d10d      	bne.n	8000826 <HAL_RCC_OscConfig+0xf6>
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	f003 0303 	and.w	r3, r3, #3
 8000810:	2b02      	cmp	r3, #2
 8000812:	d108      	bne.n	8000826 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000814:	4b79      	ldr	r3, [pc, #484]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	039a      	lsls	r2, r3, #14
 800081a:	d58e      	bpl.n	800073a <HAL_RCC_OscConfig+0xa>
 800081c:	686b      	ldr	r3, [r5, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d18b      	bne.n	800073a <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000822:	2001      	movs	r0, #1
 8000824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000826:	686b      	ldr	r3, [r5, #4]
 8000828:	4c74      	ldr	r4, [pc, #464]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 800082a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800082e:	d112      	bne.n	8000856 <HAL_RCC_OscConfig+0x126>
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000836:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000838:	f7ff fd6e 	bl	8000318 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800083c:	4c6f      	ldr	r4, [pc, #444]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800083e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	039b      	lsls	r3, r3, #14
 8000844:	f53f af79 	bmi.w	800073a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000848:	f7ff fd66 	bl	8000318 <HAL_GetTick>
 800084c:	1b80      	subs	r0, r0, r6
 800084e:	2864      	cmp	r0, #100	; 0x64
 8000850:	d9f6      	bls.n	8000840 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000852:	2003      	movs	r0, #3
 8000854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000856:	b9a3      	cbnz	r3, 8000882 <HAL_RCC_OscConfig+0x152>
 8000858:	6823      	ldr	r3, [r4, #0]
 800085a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085e:	6023      	str	r3, [r4, #0]
 8000860:	6823      	ldr	r3, [r4, #0]
 8000862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000866:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000868:	f7ff fd56 	bl	8000318 <HAL_GetTick>
 800086c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	039f      	lsls	r7, r3, #14
 8000872:	f57f af62 	bpl.w	800073a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000876:	f7ff fd4f 	bl	8000318 <HAL_GetTick>
 800087a:	1b80      	subs	r0, r0, r6
 800087c:	2864      	cmp	r0, #100	; 0x64
 800087e:	d9f6      	bls.n	800086e <HAL_RCC_OscConfig+0x13e>
 8000880:	e7e7      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000882:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	d103      	bne.n	8000892 <HAL_RCC_OscConfig+0x162>
 800088a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800088e:	6023      	str	r3, [r4, #0]
 8000890:	e7ce      	b.n	8000830 <HAL_RCC_OscConfig+0x100>
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	6023      	str	r3, [r4, #0]
 8000898:	6823      	ldr	r3, [r4, #0]
 800089a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800089e:	e7ca      	b.n	8000836 <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80008a0:	4b56      	ldr	r3, [pc, #344]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 80008a2:	68e9      	ldr	r1, [r5, #12]
 80008a4:	691a      	ldr	r2, [r3, #16]
 80008a6:	f012 0f38 	tst.w	r2, #56	; 0x38
 80008aa:	d007      	beq.n	80008bc <HAL_RCC_OscConfig+0x18c>
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80008b2:	2a18      	cmp	r2, #24
 80008b4:	d128      	bne.n	8000908 <HAL_RCC_OscConfig+0x1d8>
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	079c      	lsls	r4, r3, #30
 80008ba:	d125      	bne.n	8000908 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80008bc:	4a4f      	ldr	r2, [pc, #316]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	0758      	lsls	r0, r3, #29
 80008c2:	d501      	bpl.n	80008c8 <HAL_RCC_OscConfig+0x198>
 80008c4:	2900      	cmp	r1, #0
 80008c6:	d0ac      	beq.n	8000822 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008c8:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008ca:	4c4c      	ldr	r4, [pc, #304]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008cc:	f023 0319 	bic.w	r3, r3, #25
 80008d0:	430b      	orrs	r3, r1
 80008d2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008d4:	f7ff fd20 	bl	8000318 <HAL_GetTick>
 80008d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	075b      	lsls	r3, r3, #29
 80008de:	d50d      	bpl.n	80008fc <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e0:	6861      	ldr	r1, [r4, #4]
 80008e2:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 80008e6:	fa93 f3a3 	rbit	r3, r3
 80008ea:	fab3 f283 	clz	r2, r3
 80008ee:	692b      	ldr	r3, [r5, #16]
 80008f0:	4093      	lsls	r3, r2
 80008f2:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 80008f6:	4313      	orrs	r3, r2
 80008f8:	6063      	str	r3, [r4, #4]
 80008fa:	e722      	b.n	8000742 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008fc:	f7ff fd0c 	bl	8000318 <HAL_GetTick>
 8000900:	1b80      	subs	r0, r0, r6
 8000902:	2802      	cmp	r0, #2
 8000904:	d9e9      	bls.n	80008da <HAL_RCC_OscConfig+0x1aa>
 8000906:	e7a4      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
 8000908:	4c3c      	ldr	r4, [pc, #240]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800090a:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800090c:	b179      	cbz	r1, 800092e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800090e:	f023 0319 	bic.w	r3, r3, #25
 8000912:	430b      	orrs	r3, r1
 8000914:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000916:	f7ff fcff 	bl	8000318 <HAL_GetTick>
 800091a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	075f      	lsls	r7, r3, #29
 8000920:	d4de      	bmi.n	80008e0 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000922:	f7ff fcf9 	bl	8000318 <HAL_GetTick>
 8000926:	1b80      	subs	r0, r0, r6
 8000928:	2802      	cmp	r0, #2
 800092a:	d9f7      	bls.n	800091c <HAL_RCC_OscConfig+0x1ec>
 800092c:	e791      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 800092e:	f023 0301 	bic.w	r3, r3, #1
 8000932:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fcf0 	bl	8000318 <HAL_GetTick>
 8000938:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	0758      	lsls	r0, r3, #29
 800093e:	f57f af00 	bpl.w	8000742 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000942:	f7ff fce9 	bl	8000318 <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f6      	bls.n	800093a <HAL_RCC_OscConfig+0x20a>
 800094c:	e781      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800094e:	69eb      	ldr	r3, [r5, #28]
 8000950:	4c2a      	ldr	r4, [pc, #168]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 8000952:	b1eb      	cbz	r3, 8000990 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800095c:	f7ff fcdc 	bl	8000318 <HAL_GetTick>
 8000960:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000962:	6823      	ldr	r3, [r4, #0]
 8000964:	05df      	lsls	r7, r3, #23
 8000966:	d50d      	bpl.n	8000984 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000968:	6861      	ldr	r1, [r4, #4]
 800096a:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 800096e:	fa93 f3a3 	rbit	r3, r3
 8000972:	fab3 f283 	clz	r2, r3
 8000976:	6a2b      	ldr	r3, [r5, #32]
 8000978:	4093      	lsls	r3, r2
 800097a:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 800097e:	4313      	orrs	r3, r2
 8000980:	6063      	str	r3, [r4, #4]
 8000982:	e707      	b.n	8000794 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000984:	f7ff fcc8 	bl	8000318 <HAL_GetTick>
 8000988:	1b80      	subs	r0, r0, r6
 800098a:	2802      	cmp	r0, #2
 800098c:	d9e9      	bls.n	8000962 <HAL_RCC_OscConfig+0x232>
 800098e:	e760      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000996:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fcbe 	bl	8000318 <HAL_GetTick>
 800099c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 800099e:	6823      	ldr	r3, [r4, #0]
 80009a0:	05d8      	lsls	r0, r3, #23
 80009a2:	f57f aef7 	bpl.w	8000794 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80009a6:	f7ff fcb7 	bl	8000318 <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9f6      	bls.n	800099e <HAL_RCC_OscConfig+0x26e>
 80009b0:	e74f      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009b2:	696b      	ldr	r3, [r5, #20]
 80009b4:	4c11      	ldr	r4, [pc, #68]	; (80009fc <HAL_RCC_OscConfig+0x2cc>)
 80009b6:	b183      	cbz	r3, 80009da <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 80009b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80009c0:	f7ff fcaa 	bl	8000318 <HAL_GetTick>
 80009c4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80009c8:	079b      	lsls	r3, r3, #30
 80009ca:	f53f aee7 	bmi.w	800079c <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ce:	f7ff fca3 	bl	8000318 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2802      	cmp	r0, #2
 80009d6:	d9f6      	bls.n	80009c6 <HAL_RCC_OscConfig+0x296>
 80009d8:	e73b      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 80009da:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 80009e2:	f7ff fc99 	bl	8000318 <HAL_GetTick>
 80009e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80009ea:	079f      	lsls	r7, r3, #30
 80009ec:	f57f aed6 	bpl.w	800079c <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f0:	f7ff fc92 	bl	8000318 <HAL_GetTick>
 80009f4:	1b80      	subs	r0, r0, r6
 80009f6:	2802      	cmp	r0, #2
 80009f8:	d9f6      	bls.n	80009e8 <HAL_RCC_OscConfig+0x2b8>
 80009fa:	e72a      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
 80009fc:	58024400 	.word	0x58024400
 8000a00:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000a04:	69ab      	ldr	r3, [r5, #24]
 8000a06:	4c6e      	ldr	r4, [pc, #440]	; (8000bc0 <HAL_RCC_OscConfig+0x490>)
 8000a08:	b183      	cbz	r3, 8000a2c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8000a0a:	6823      	ldr	r3, [r4, #0]
 8000a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a10:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000a12:	f7ff fc81 	bl	8000318 <HAL_GetTick>
 8000a16:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	0498      	lsls	r0, r3, #18
 8000a1c:	f53f aec2 	bmi.w	80007a4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000a20:	f7ff fc7a 	bl	8000318 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	2802      	cmp	r0, #2
 8000a28:	d9f6      	bls.n	8000a18 <HAL_RCC_OscConfig+0x2e8>
 8000a2a:	e712      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a32:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000a34:	f7ff fc70 	bl	8000318 <HAL_GetTick>
 8000a38:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	0499      	lsls	r1, r3, #18
 8000a3e:	f57f aeb1 	bpl.w	80007a4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000a42:	f7ff fc69 	bl	8000318 <HAL_GetTick>
 8000a46:	1b80      	subs	r0, r0, r6
 8000a48:	2802      	cmp	r0, #2
 8000a4a:	d9f6      	bls.n	8000a3a <HAL_RCC_OscConfig+0x30a>
 8000a4c:	e701      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a4e:	f7ff fc63 	bl	8000318 <HAL_GetTick>
 8000a52:	1b80      	subs	r0, r0, r6
 8000a54:	2864      	cmp	r0, #100	; 0x64
 8000a56:	f67f aeb0 	bls.w	80007ba <HAL_RCC_OscConfig+0x8a>
 8000a5a:	e6fa      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5c:	b9b3      	cbnz	r3, 8000a8c <HAL_RCC_OscConfig+0x35c>
 8000a5e:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a60:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a64:	f023 0301 	bic.w	r3, r3, #1
 8000a68:	6723      	str	r3, [r4, #112]	; 0x70
 8000a6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a6c:	f023 0304 	bic.w	r3, r3, #4
 8000a70:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a72:	f7ff fc51 	bl	8000318 <HAL_GetTick>
 8000a76:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a7a:	0798      	lsls	r0, r3, #30
 8000a7c:	f57f aeb4 	bpl.w	80007e8 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a80:	f7ff fc4a 	bl	8000318 <HAL_GetTick>
 8000a84:	1b80      	subs	r0, r0, r6
 8000a86:	42b8      	cmp	r0, r7
 8000a88:	d9f6      	bls.n	8000a78 <HAL_RCC_OscConfig+0x348>
 8000a8a:	e6e2      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a90:	d103      	bne.n	8000a9a <HAL_RCC_OscConfig+0x36a>
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6723      	str	r3, [r4, #112]	; 0x70
 8000a98:	e698      	b.n	80007cc <HAL_RCC_OscConfig+0x9c>
 8000a9a:	f023 0301 	bic.w	r3, r3, #1
 8000a9e:	6723      	str	r3, [r4, #112]	; 0x70
 8000aa0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000aa2:	f023 0304 	bic.w	r3, r3, #4
 8000aa6:	e694      	b.n	80007d2 <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa8:	f7ff fc36 	bl	8000318 <HAL_GetTick>
 8000aac:	1bc0      	subs	r0, r0, r7
 8000aae:	42a0      	cmp	r0, r4
 8000ab0:	f67f ae96 	bls.w	80007e0 <HAL_RCC_OscConfig+0xb0>
 8000ab4:	e6cd      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000ab6:	4c42      	ldr	r4, [pc, #264]	; (8000bc0 <HAL_RCC_OscConfig+0x490>)
 8000ab8:	6923      	ldr	r3, [r4, #16]
 8000aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000abe:	2b18      	cmp	r3, #24
 8000ac0:	f43f aeaf 	beq.w	8000822 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8000ac4:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ac6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000acc:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ace:	d169      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fc22 	bl	8000318 <HAL_GetTick>
 8000ad4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	0199      	lsls	r1, r3, #6
 8000ada:	d45d      	bmi.n	8000b98 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000adc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ade:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000ae0:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000ae4:	f023 0303 	bic.w	r3, r3, #3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000aec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000af2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000af4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000af6:	3b01      	subs	r3, #1
 8000af8:	3a01      	subs	r2, #1
 8000afa:	025b      	lsls	r3, r3, #9
 8000afc:	0412      	lsls	r2, r2, #16
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000b04:	4313      	orrs	r3, r2
 8000b06:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000b12:	3a01      	subs	r2, #1
 8000b14:	0612      	lsls	r2, r2, #24
 8000b16:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b1e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000b22:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000b24:	fa93 f3a3 	rbit	r3, r3
 8000b28:	fab3 f183 	clz	r1, r3
 8000b2c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b30:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000b32:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b36:	408b      	lsls	r3, r1
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b3e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000b40:	f023 030c 	bic.w	r3, r3, #12
 8000b44:	4313      	orrs	r3, r2
 8000b46:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000b48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b4a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000b4c:	f023 0302 	bic.w	r3, r3, #2
 8000b50:	4313      	orrs	r3, r2
 8000b52:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000b54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000b5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b6a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000b6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000b74:	6823      	ldr	r3, [r4, #0]
 8000b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fbcc 	bl	8000318 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b80:	4c0f      	ldr	r4, [pc, #60]	; (8000bc0 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8000b82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	019a      	lsls	r2, r3, #6
 8000b88:	f53f ae32 	bmi.w	80007f0 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b8c:	f7ff fbc4 	bl	8000318 <HAL_GetTick>
 8000b90:	1b40      	subs	r0, r0, r5
 8000b92:	2802      	cmp	r0, #2
 8000b94:	d9f6      	bls.n	8000b84 <HAL_RCC_OscConfig+0x454>
 8000b96:	e65c      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fbbe 	bl	8000318 <HAL_GetTick>
 8000b9c:	1b80      	subs	r0, r0, r6
 8000b9e:	2802      	cmp	r0, #2
 8000ba0:	d999      	bls.n	8000ad6 <HAL_RCC_OscConfig+0x3a6>
 8000ba2:	e656      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8000ba4:	f7ff fbb8 	bl	8000318 <HAL_GetTick>
 8000ba8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	019b      	lsls	r3, r3, #6
 8000bae:	f57f ae1f 	bpl.w	80007f0 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bb2:	f7ff fbb1 	bl	8000318 <HAL_GetTick>
 8000bb6:	1b40      	subs	r0, r0, r5
 8000bb8:	2802      	cmp	r0, #2
 8000bba:	d9f6      	bls.n	8000baa <HAL_RCC_OscConfig+0x47a>
 8000bbc:	e649      	b.n	8000852 <HAL_RCC_OscConfig+0x122>
 8000bbe:	bf00      	nop
 8000bc0:	58024400 	.word	0x58024400

08000bc4 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bc4:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x124>)
 8000bc6:	691a      	ldr	r2, [r3, #16]
 8000bc8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000bcc:	2a10      	cmp	r2, #16
{
 8000bce:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd0:	d00e      	beq.n	8000bf0 <HAL_RCC_GetSysClockFreq+0x2c>
 8000bd2:	2a18      	cmp	r2, #24
 8000bd4:	d00e      	beq.n	8000bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	f040 8084 	bne.w	8000ce4 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4843      	ldr	r0, [pc, #268]	; (8000cec <HAL_RCC_GetSysClockFreq+0x128>)
 8000be0:	f012 0f20 	tst.w	r2, #32
 8000be4:	d07f      	beq.n	8000ce6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000bec:	40d8      	lsrs	r0, r3
 8000bee:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000bf0:	483f      	ldr	r0, [pc, #252]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000bf2:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000bf4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000bf6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000bf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000bfc:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000c00:	f001 0101 	and.w	r1, r1, #1
 8000c04:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8000cf4 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000c08:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8000c0c:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000c0e:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000c12:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8000c16:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000c18:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8000c20:	d002      	beq.n	8000c28 <HAL_RCC_GetSysClockFreq+0x64>
 8000c22:	d30e      	bcc.n	8000c42 <HAL_RCC_GetSysClockFreq+0x7e>
 8000c24:	2a02      	cmp	r2, #2
 8000c26:	d04c      	beq.n	8000cc2 <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a33      	ldr	r2, [pc, #204]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x134>)
 8000c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c30:	ee07 3a10 	vmov	s14, r3
 8000c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c38:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c40:	e04b      	b.n	8000cda <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	f012 0f20 	tst.w	r2, #32
 8000c48:	4a28      	ldr	r2, [pc, #160]	; (8000cec <HAL_RCC_GetSysClockFreq+0x128>)
 8000c4a:	d026      	beq.n	8000c9a <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000c4c:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000c50:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000c58:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000c5a:	fbb2 f2f0 	udiv	r2, r2, r0
 8000c5e:	ee07 2a10 	vmov	s14, r2
 8000c62:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000c66:	ee07 3a10 	vmov	s14, r3
 8000c6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c6e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c76:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8000c7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <HAL_RCC_GetSysClockFreq+0x124>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000c82:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8000c84:	ee07 3a10 	vmov	s14, r3
 8000c88:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000c8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c90:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000c94:	ee17 0a90 	vmov	r0, s15
 8000c98:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ca0:	ee07 3a10 	vmov	s14, r3
 8000ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ca8:	fbb2 f3f0 	udiv	r3, r2, r0
 8000cac:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000cb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cb4:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc0:	e7db      	b.n	8000c7a <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cca:	ee07 3a10 	vmov	s14, r3
 8000cce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000cd2:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000cda:	fbb2 f2f0 	udiv	r2, r2, r0
 8000cde:	ee07 2a90 	vmov	s15, r2
 8000ce2:	e7e9      	b.n	8000cb8 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8000ce6:	bd10      	pop	{r4, pc}
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	03d09000 	.word	0x03d09000
 8000cf0:	007a1200 	.word	0x007a1200
 8000cf4:	39000000 	.word	0x39000000
 8000cf8:	003d0900 	.word	0x003d0900

08000cfc <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cfc:	4a68      	ldr	r2, [pc, #416]	; (8000ea0 <HAL_RCC_ClockConfig+0x1a4>)
 8000cfe:	6813      	ldr	r3, [r2, #0]
 8000d00:	f003 0307 	and.w	r3, r3, #7
 8000d04:	428b      	cmp	r3, r1
{
 8000d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d0e:	d342      	bcc.n	8000d96 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	0797      	lsls	r7, r2, #30
 8000d14:	d44c      	bmi.n	8000db0 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d16:	07d6      	lsls	r6, r2, #31
 8000d18:	d452      	bmi.n	8000dc0 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d1a:	4a61      	ldr	r2, [pc, #388]	; (8000ea0 <HAL_RCC_ClockConfig+0x1a4>)
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	429d      	cmp	r5, r3
 8000d24:	f0c0 80a8 	bcc.w	8000e78 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000d28:	6822      	ldr	r2, [r4, #0]
 8000d2a:	0755      	lsls	r5, r2, #29
 8000d2c:	f100 80af 	bmi.w	8000e8e <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d30:	0710      	lsls	r0, r2, #28
 8000d32:	d506      	bpl.n	8000d42 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000d34:	495b      	ldr	r1, [pc, #364]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000d36:	6960      	ldr	r0, [r4, #20]
 8000d38:	69cb      	ldr	r3, [r1, #28]
 8000d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d3e:	4303      	orrs	r3, r0
 8000d40:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d42:	06d1      	lsls	r1, r2, #27
 8000d44:	d506      	bpl.n	8000d54 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000d46:	4957      	ldr	r1, [pc, #348]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000d48:	69a0      	ldr	r0, [r4, #24]
 8000d4a:	69cb      	ldr	r3, [r1, #28]
 8000d4c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d50:	4303      	orrs	r3, r0
 8000d52:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000d54:	0693      	lsls	r3, r2, #26
 8000d56:	d506      	bpl.n	8000d66 <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8000d58:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000d5a:	69e1      	ldr	r1, [r4, #28]
 8000d5c:	6a13      	ldr	r3, [r2, #32]
 8000d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d62:	430b      	orrs	r3, r1
 8000d64:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8000d66:	f7ff ff2d 	bl	8000bc4 <HAL_RCC_GetSysClockFreq>
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	fa92 f2a2 	rbit	r2, r2
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000d7e:	40d3      	lsrs	r3, r2
 8000d80:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <HAL_RCC_ClockConfig+0x1ac>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	40d8      	lsrs	r0, r3
 8000d86:	4b49      	ldr	r3, [pc, #292]	; (8000eac <HAL_RCC_ClockConfig+0x1b0>)
 8000d88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f001 ff72 	bl	8002c74 <HAL_InitTick>
  return HAL_OK;
 8000d90:	2000      	movs	r0, #0
}
 8000d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f023 0307 	bic.w	r3, r3, #7
 8000d9c:	430b      	orrs	r3, r1
 8000d9e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da0:	6813      	ldr	r3, [r2, #0]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	4299      	cmp	r1, r3
 8000da8:	d0b2      	beq.n	8000d10 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000daa:	2001      	movs	r0, #1
 8000dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db0:	493c      	ldr	r1, [pc, #240]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000db2:	68e0      	ldr	r0, [r4, #12]
 8000db4:	698b      	ldr	r3, [r1, #24]
 8000db6:	f023 030f 	bic.w	r3, r3, #15
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	618b      	str	r3, [r1, #24]
 8000dbe:	e7aa      	b.n	8000d16 <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000dc2:	68a1      	ldr	r1, [r4, #8]
 8000dc4:	699a      	ldr	r2, [r3, #24]
 8000dc6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dce:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd0:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd2:	2902      	cmp	r1, #2
 8000dd4:	d11d      	bne.n	8000e12 <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dda:	d0e6      	beq.n	8000daa <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ddc:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dde:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000de2:	4f30      	ldr	r7, [pc, #192]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000de4:	f022 0207 	bic.w	r2, r2, #7
 8000de8:	430a      	orrs	r2, r1
 8000dea:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8000dec:	f7ff fa94 	bl	8000318 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df0:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8000df2:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d119      	bne.n	8000e2c <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000dfe:	2b10      	cmp	r3, #16
 8000e00:	d08b      	beq.n	8000d1a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e02:	f7ff fa89 	bl	8000318 <HAL_GetTick>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	4540      	cmp	r0, r8
 8000e0a:	d9f5      	bls.n	8000df8 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e12:	2903      	cmp	r1, #3
 8000e14:	d102      	bne.n	8000e1c <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e1a:	e7de      	b.n	8000dda <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8000e1c:	2901      	cmp	r1, #1
 8000e1e:	d102      	bne.n	8000e26 <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000e20:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000e24:	e7d9      	b.n	8000dda <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	f012 0f04 	tst.w	r2, #4
 8000e2a:	e7d6      	b.n	8000dda <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d10b      	bne.n	8000e48 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e36:	2b18      	cmp	r3, #24
 8000e38:	f43f af6f 	beq.w	8000d1a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3c:	f7ff fa6c 	bl	8000318 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	4540      	cmp	r0, r8
 8000e44:	d9f4      	bls.n	8000e30 <HAL_RCC_ClockConfig+0x134>
 8000e46:	e7e1      	b.n	8000e0c <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d110      	bne.n	8000e6e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	f43f af61 	beq.w	8000d1a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e58:	f7ff fa5e 	bl	8000318 <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	4540      	cmp	r0, r8
 8000e60:	d9f4      	bls.n	8000e4c <HAL_RCC_ClockConfig+0x150>
 8000e62:	e7d3      	b.n	8000e0c <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e64:	f7ff fa58 	bl	8000318 <HAL_GetTick>
 8000e68:	1b80      	subs	r0, r0, r6
 8000e6a:	4540      	cmp	r0, r8
 8000e6c:	d8ce      	bhi.n	8000e0c <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	f013 0f38 	tst.w	r3, #56	; 0x38
 8000e74:	d1f6      	bne.n	8000e64 <HAL_RCC_ClockConfig+0x168>
 8000e76:	e750      	b.n	8000d1a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	f023 0307 	bic.w	r3, r3, #7
 8000e7e:	432b      	orrs	r3, r5
 8000e80:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	429d      	cmp	r5, r3
 8000e8a:	d18e      	bne.n	8000daa <HAL_RCC_ClockConfig+0xae>
 8000e8c:	e74c      	b.n	8000d28 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <HAL_RCC_ClockConfig+0x1a8>)
 8000e90:	6920      	ldr	r0, [r4, #16]
 8000e92:	698b      	ldr	r3, [r1, #24]
 8000e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e98:	4303      	orrs	r3, r0
 8000e9a:	618b      	str	r3, [r1, #24]
 8000e9c:	e748      	b.n	8000d30 <HAL_RCC_ClockConfig+0x34>
 8000e9e:	bf00      	nop
 8000ea0:	52002000 	.word	0x52002000
 8000ea4:	58024400 	.word	0x58024400
 8000ea8:	08002e56 	.word	0x08002e56
 8000eac:	20000008 	.word	0x20000008

08000eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000eb0:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8000eb2:	f000 fd93 	bl	80019dc <HAL_RCCEx_GetD1SysClockFreq>
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_RCC_GetHCLKFreq+0x28>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	fa92 f2a2 	rbit	r2, r2
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	40d3      	lsrs	r3, r2
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_RCC_GetHCLKFreq+0x2c>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	40d8      	lsrs	r0, r3
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_RCC_GetHCLKFreq+0x30>)
 8000ed2:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8000ed4:	bd08      	pop	{r3, pc}
 8000ed6:	bf00      	nop
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	08002e56 	.word	0x08002e56
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ee4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8000ee6:	f7ff ffe3 	bl	8000eb0 <HAL_RCC_GetHCLKFreq>
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	fa92 f2a2 	rbit	r2, r2
 8000ef6:	fab2 f282 	clz	r2, r2
 8000efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000efe:	40d3      	lsrs	r3, r2
 8000f00:	4a02      	ldr	r2, [pc, #8]	; (8000f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
}
 8000f04:	40d8      	lsrs	r0, r3
 8000f06:	bd08      	pop	{r3, pc}
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	08002e56 	.word	0x08002e56

08000f10 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8000f10:	233f      	movs	r3, #63	; 0x3f
 8000f12:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_RCC_GetClockConfig+0x4c>)
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	f002 0207 	and.w	r2, r2, #7
 8000f1c:	6042      	str	r2, [r0, #4]

  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8000f1e:	699a      	ldr	r2, [r3, #24]
 8000f20:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8000f24:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	f002 020f 	and.w	r2, r2, #15
 8000f2c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f34:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8000f36:	69da      	ldr	r2, [r3, #28]
 8000f38:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8000f3c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8000f3e:	69da      	ldr	r2, [r3, #28]
 8000f40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000f44:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8000f46:	6a1b      	ldr	r3, [r3, #32]
 8000f48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f4c:	61c3      	str	r3, [r0, #28]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <HAL_RCC_GetClockConfig+0x50>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	52002000 	.word	0x52002000

08000f64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8000f66:	4c31      	ldr	r4, [pc, #196]	; (800102c <RCCEx_PLL2_Config+0xc8>)
{
 8000f68:	4606      	mov	r6, r0
 8000f6a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8000f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d058      	beq.n	8001028 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000f7c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f7e:	f7ff f9cb 	bl	8000318 <HAL_GetTick>
 8000f82:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	011a      	lsls	r2, r3, #4
 8000f88:	d43a      	bmi.n	8001000 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8000f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f8c:	6832      	ldr	r2, [r6, #0]
 8000f8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f98:	68b3      	ldr	r3, [r6, #8]
 8000f9a:	68f2      	ldr	r2, [r6, #12]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	025b      	lsls	r3, r3, #9
 8000fa2:	0412      	lsls	r2, r2, #16
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000faa:	4313      	orrs	r3, r2
 8000fac:	6872      	ldr	r2, [r6, #4]
 8000fae:	3a01      	subs	r2, #1
 8000fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	6932      	ldr	r2, [r6, #16]
 8000fb8:	3a01      	subs	r2, #1
 8000fba:	0612      	lsls	r2, r2, #24
 8000fbc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8000fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc6:	6972      	ldr	r2, [r6, #20]
 8000fc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8000fd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fd2:	69b2      	ldr	r2, [r6, #24]
 8000fd4:	f023 0320 	bic.w	r3, r3, #32
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8000fdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8000fde:	b9b5      	cbnz	r5, 800100e <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8000fe0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8000fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8000fe6:	4c11      	ldr	r4, [pc, #68]	; (800102c <RCCEx_PLL2_Config+0xc8>)
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fee:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ff0:	f7ff f992 	bl	8000318 <HAL_GetTick>
 8000ff4:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	d50f      	bpl.n	800101c <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001000:	f7ff f98a 	bl	8000318 <HAL_GetTick>
 8001004:	1bc0      	subs	r0, r0, r7
 8001006:	2802      	cmp	r0, #2
 8001008:	d9bc      	bls.n	8000f84 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
 800100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800100e:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001010:	bf0c      	ite	eq
 8001012:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001016:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800101a:	e7e3      	b.n	8000fe4 <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800101c:	f7ff f97c 	bl	8000318 <HAL_GetTick>
 8001020:	1b40      	subs	r0, r0, r5
 8001022:	2802      	cmp	r0, #2
 8001024:	d9e7      	bls.n	8000ff6 <RCCEx_PLL2_Config+0x92>
 8001026:	e7f0      	b.n	800100a <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 8001028:	2001      	movs	r0, #1
}
 800102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800102c:	58024400 	.word	0x58024400

08001030 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001032:	4c31      	ldr	r4, [pc, #196]	; (80010f8 <RCCEx_PLL3_Config+0xc8>)
{
 8001034:	4606      	mov	r6, r0
 8001036:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d058      	beq.n	80010f4 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001048:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800104a:	f7ff f965 	bl	8000318 <HAL_GetTick>
 800104e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	009a      	lsls	r2, r3, #2
 8001054:	d43a      	bmi.n	80010cc <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001058:	6832      	ldr	r2, [r6, #0]
 800105a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800105e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001062:	62a3      	str	r3, [r4, #40]	; 0x28
 8001064:	68b3      	ldr	r3, [r6, #8]
 8001066:	68f2      	ldr	r2, [r6, #12]
 8001068:	3b01      	subs	r3, #1
 800106a:	3a01      	subs	r2, #1
 800106c:	025b      	lsls	r3, r3, #9
 800106e:	0412      	lsls	r2, r2, #16
 8001070:	b29b      	uxth	r3, r3
 8001072:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001076:	4313      	orrs	r3, r2
 8001078:	6872      	ldr	r2, [r6, #4]
 800107a:	3a01      	subs	r2, #1
 800107c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001080:	4313      	orrs	r3, r2
 8001082:	6932      	ldr	r2, [r6, #16]
 8001084:	3a01      	subs	r2, #1
 8001086:	0612      	lsls	r2, r2, #24
 8001088:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800108c:	4313      	orrs	r3, r2
 800108e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001092:	6972      	ldr	r2, [r6, #20]
 8001094:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001098:	4313      	orrs	r3, r2
 800109a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800109c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800109e:	69b2      	ldr	r2, [r6, #24]
 80010a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010a4:	4313      	orrs	r3, r2
 80010a6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80010a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80010aa:	b9b5      	cbnz	r5, 80010da <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80010ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80010b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80010b2:	4c11      	ldr	r4, [pc, #68]	; (80010f8 <RCCEx_PLL3_Config+0xc8>)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010bc:	f7ff f92c 	bl	8000318 <HAL_GetTick>
 80010c0:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	d50f      	bpl.n	80010e8 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 80010c8:	2000      	movs	r0, #0
 80010ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80010cc:	f7ff f924 	bl	8000318 <HAL_GetTick>
 80010d0:	1bc0      	subs	r0, r0, r7
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9bc      	bls.n	8001050 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80010d6:	2003      	movs	r0, #3
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80010da:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80010dc:	bf0c      	ite	eq
 80010de:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80010e2:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80010e6:	e7e3      	b.n	80010b0 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80010e8:	f7ff f916 	bl	8000318 <HAL_GetTick>
 80010ec:	1b40      	subs	r0, r0, r5
 80010ee:	2802      	cmp	r0, #2
 80010f0:	d9e7      	bls.n	80010c2 <RCCEx_PLL3_Config+0x92>
 80010f2:	e7f0      	b.n	80010d6 <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
}
 80010f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010f8:	58024400 	.word	0x58024400

080010fc <HAL_RCCEx_PeriphCLKConfig>:
{
 80010fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001100:	6804      	ldr	r4, [r0, #0]
{
 8001102:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001104:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 8001108:	d014      	beq.n	8001134 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800110a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800110c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001110:	d018      	beq.n	8001144 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001112:	d802      	bhi.n	800111a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001114:	b183      	cbz	r3, 8001138 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 8001116:	2401      	movs	r4, #1
 8001118:	e01b      	b.n	8001152 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800111a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800111e:	d023      	beq.n	8001168 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001124:	d1f7      	bne.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001126:	4aa6      	ldr	r2, [pc, #664]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001128:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800112a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800112c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001130:	430b      	orrs	r3, r1
 8001132:	6513      	str	r3, [r2, #80]	; 0x50
 8001134:	2400      	movs	r4, #0
 8001136:	e00c      	b.n	8001152 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001138:	4aa1      	ldr	r2, [pc, #644]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800113a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001142:	e7f0      	b.n	8001126 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001144:	2102      	movs	r1, #2
 8001146:	1d28      	adds	r0, r5, #4
 8001148:	f7ff ff0c 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800114c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800114e:	2800      	cmp	r0, #0
 8001150:	d0e9      	beq.n	8001126 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001152:	682b      	ldr	r3, [r5, #0]
 8001154:	05de      	lsls	r6, r3, #23
 8001156:	d53c      	bpl.n	80011d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001158:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800115a:	2b04      	cmp	r3, #4
 800115c:	d834      	bhi.n	80011c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800115e:	e8df f003 	tbb	[pc, r3]
 8001162:	1009      	.short	0x1009
 8001164:	0e2d      	.short	0x0e2d
 8001166:	0e          	.byte	0x0e
 8001167:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001168:	2102      	movs	r1, #2
 800116a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800116e:	f7ff ff5f 	bl	8001030 <RCCEx_PLL3_Config>
 8001172:	e7eb      	b.n	800114c <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001174:	4a92      	ldr	r2, [pc, #584]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001176:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800117e:	4626      	mov	r6, r4
 8001180:	e004      	b.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001182:	2100      	movs	r1, #0
 8001184:	1d28      	adds	r0, r5, #4
 8001186:	f7ff feed 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800118a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800118c:	b9ee      	cbnz	r6, 80011ca <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800118e:	4a8c      	ldr	r2, [pc, #560]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001190:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001192:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001194:	f023 0307 	bic.w	r3, r3, #7
 8001198:	430b      	orrs	r3, r1
 800119a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800119c:	682b      	ldr	r3, [r5, #0]
 800119e:	0598      	lsls	r0, r3, #22
 80011a0:	d527      	bpl.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 80011a2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80011a4:	2b80      	cmp	r3, #128	; 0x80
 80011a6:	d043      	beq.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80011a8:	d815      	bhi.n	80011d6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d034      	beq.n	8001218 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d038      	beq.n	8001224 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 80011b2:	2601      	movs	r6, #1
      status |= ret;
 80011b4:	ea44 0006 	orr.w	r0, r4, r6
 80011b8:	b2c4      	uxtb	r4, r0
 80011ba:	e01a      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80011bc:	2100      	movs	r1, #0
 80011be:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80011c2:	f7ff ff35 	bl	8001030 <RCCEx_PLL3_Config>
 80011c6:	e7e0      	b.n	800118a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 80011c8:	2601      	movs	r6, #1
      status |= ret;
 80011ca:	ea44 0006 	orr.w	r0, r4, r6
 80011ce:	b2c4      	uxtb	r4, r0
 80011d0:	e7e4      	b.n	800119c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80011d2:	4626      	mov	r6, r4
 80011d4:	e7e2      	b.n	800119c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80011d6:	2bc0      	cmp	r3, #192	; 0xc0
 80011d8:	d002      	beq.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80011da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011de:	d1e8      	bne.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 80011e0:	2e00      	cmp	r6, #0
 80011e2:	d1e7      	bne.n	80011b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80011e4:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80011e6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80011e8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80011ea:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	0559      	lsls	r1, r3, #21
 80011f6:	d531      	bpl.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 80011f8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80011fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001200:	d04b      	beq.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8001202:	d81b      	bhi.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001204:	2b00      	cmp	r3, #0
 8001206:	d03c      	beq.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001208:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800120c:	d03f      	beq.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 800120e:	2601      	movs	r6, #1
      status |= ret;
 8001210:	ea44 0006 	orr.w	r0, r4, r6
 8001214:	b2c4      	uxtb	r4, r0
 8001216:	e021      	b.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001218:	4a69      	ldr	r2, [pc, #420]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800121a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001222:	e7dd      	b.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001224:	2100      	movs	r1, #0
 8001226:	1d28      	adds	r0, r5, #4
 8001228:	f7ff fe9c 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800122c:	4606      	mov	r6, r0
      break;
 800122e:	e7d7      	b.n	80011e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001230:	2100      	movs	r1, #0
 8001232:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001236:	f7ff fefb 	bl	8001030 <RCCEx_PLL3_Config>
 800123a:	e7f7      	b.n	800122c <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 800123c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001240:	d002      	beq.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001246:	d1e2      	bne.n	800120e <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8001248:	2e00      	cmp	r6, #0
 800124a:	d1e1      	bne.n	8001210 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800124c:	4a5c      	ldr	r2, [pc, #368]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800124e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001252:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001254:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001258:	430b      	orrs	r3, r1
 800125a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	051a      	lsls	r2, r3, #20
 8001260:	d531      	bpl.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001262:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800126a:	d045      	beq.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800126c:	d81b      	bhi.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800126e:	2b00      	cmp	r3, #0
 8001270:	d036      	beq.n	80012e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8001272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001276:	d039      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8001278:	2601      	movs	r6, #1
      status |= ret;
 800127a:	ea44 0006 	orr.w	r0, r4, r6
 800127e:	b2c4      	uxtb	r4, r0
 8001280:	e021      	b.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001282:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001284:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800128c:	e7dc      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800128e:	2100      	movs	r1, #0
 8001290:	1d28      	adds	r0, r5, #4
 8001292:	f7ff fe67 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001296:	4606      	mov	r6, r0
      break;
 8001298:	e7d6      	b.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800129a:	2100      	movs	r1, #0
 800129c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80012a0:	f7ff fec6 	bl	8001030 <RCCEx_PLL3_Config>
 80012a4:	e7f7      	b.n	8001296 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 80012a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80012aa:	d002      	beq.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80012ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012b0:	d1e2      	bne.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 80012b2:	2e00      	cmp	r6, #0
 80012b4:	d1e1      	bne.n	800127a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80012b6:	4a42      	ldr	r2, [pc, #264]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80012b8:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80012bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80012be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80012c6:	682b      	ldr	r3, [r5, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	d528      	bpl.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 80012cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80012ce:	2b10      	cmp	r3, #16
 80012d0:	d037      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x246>
 80012d2:	d817      	bhi.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80012d4:	b1d3      	cbz	r3, 800130c <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 80012d6:	2601      	movs	r6, #1
      status |= ret;
 80012d8:	ea44 0006 	orr.w	r0, r4, r6
 80012dc:	b2c4      	uxtb	r4, r0
 80012de:	e01e      	b.n	800131e <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80012e0:	4a37      	ldr	r2, [pc, #220]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80012e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80012e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80012ea:	e7e2      	b.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80012ec:	2100      	movs	r1, #0
 80012ee:	1d28      	adds	r0, r5, #4
 80012f0:	f7ff fe38 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80012f4:	4606      	mov	r6, r0
      break;
 80012f6:	e7dc      	b.n	80012b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80012f8:	2100      	movs	r1, #0
 80012fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80012fe:	f7ff fe97 	bl	8001030 <RCCEx_PLL3_Config>
 8001302:	e7f7      	b.n	80012f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 8001304:	2b20      	cmp	r3, #32
 8001306:	d022      	beq.n	800134e <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001308:	2b30      	cmp	r3, #48	; 0x30
 800130a:	d1e4      	bne.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 800130c:	2e00      	cmp	r6, #0
 800130e:	d1e3      	bne.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001310:	4a2b      	ldr	r2, [pc, #172]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001312:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001314:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001316:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800131a:	430b      	orrs	r3, r1
 800131c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	04df      	lsls	r7, r3, #19
 8001322:	d529      	bpl.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001324:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800132a:	d042      	beq.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800132c:	d815      	bhi.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d033      	beq.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8001332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001336:	d036      	beq.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8001338:	2601      	movs	r6, #1
      status |= ret;
 800133a:	ea44 0006 	orr.w	r0, r4, r6
 800133e:	b2c4      	uxtb	r4, r0
 8001340:	e01a      	b.n	8001378 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001344:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800134c:	e7de      	b.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800134e:	2102      	movs	r1, #2
 8001350:	1d28      	adds	r0, r5, #4
 8001352:	f7ff fe07 	bl	8000f64 <RCCEx_PLL2_Config>
 8001356:	4606      	mov	r6, r0
      break;
 8001358:	e7d8      	b.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 800135a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800135e:	d002      	beq.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001364:	d1e8      	bne.n	8001338 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 8001366:	2e00      	cmp	r6, #0
 8001368:	d1e7      	bne.n	800133a <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800136a:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800136c:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800136e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001370:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001374:	430b      	orrs	r3, r1
 8001376:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001378:	682b      	ldr	r3, [r5, #0]
 800137a:	0498      	lsls	r0, r3, #18
 800137c:	d534      	bpl.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 800137e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001384:	d048      	beq.n	8001418 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001386:	d81d      	bhi.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8001388:	b32b      	cbz	r3, 80013d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800138a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800138e:	d03d      	beq.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 8001390:	2601      	movs	r6, #1
      status |= ret;
 8001392:	ea44 0006 	orr.w	r0, r4, r6
 8001396:	b2c4      	uxtb	r4, r0
 8001398:	e026      	b.n	80013e8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800139c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80013a4:	e7df      	b.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80013a6:	2100      	movs	r1, #0
 80013a8:	1d28      	adds	r0, r5, #4
 80013aa:	f7ff fddb 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80013ae:	4606      	mov	r6, r0
      break;
 80013b0:	e7d9      	b.n	8001366 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80013b2:	2100      	movs	r1, #0
 80013b4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80013b8:	f7ff fe3a 	bl	8001030 <RCCEx_PLL3_Config>
 80013bc:	e7f7      	b.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80013be:	bf00      	nop
 80013c0:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80013c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013c8:	d005      	beq.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80013ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013ce:	d002      	beq.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80013d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013d4:	d1dc      	bne.n	8001390 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80013d6:	2e00      	cmp	r6, #0
 80013d8:	d1db      	bne.n	8001392 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80013da:	4aa0      	ldr	r2, [pc, #640]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80013dc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80013de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80013e0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	0459      	lsls	r1, r3, #17
 80013ec:	d52d      	bpl.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80013ee:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80013f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f6:	d04c      	beq.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x396>
 80013f8:	d814      	bhi.n	8001424 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80013fa:	b1e3      	cbz	r3, 8001436 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80013fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001400:	d041      	beq.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 8001402:	2601      	movs	r6, #1
      status |= ret;
 8001404:	ea44 0006 	orr.w	r0, r4, r6
 8001408:	b2c4      	uxtb	r4, r0
 800140a:	e01e      	b.n	800144a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800140c:	2101      	movs	r1, #1
 800140e:	1d28      	adds	r0, r5, #4
 8001410:	f7ff fda8 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001414:	4606      	mov	r6, r0
      break;
 8001416:	e7de      	b.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001418:	2101      	movs	r1, #1
 800141a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800141e:	f7ff fe07 	bl	8001030 <RCCEx_PLL3_Config>
 8001422:	e7f7      	b.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d005      	beq.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800142a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800142e:	d002      	beq.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001430:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001434:	d1e5      	bne.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 8001436:	2e00      	cmp	r6, #0
 8001438:	d1e4      	bne.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800143a:	4a88      	ldr	r2, [pc, #544]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800143c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8001440:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001442:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001446:	430b      	orrs	r3, r1
 8001448:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	d50f      	bpl.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 8001450:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8001452:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001456:	d022      	beq.n	800149e <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800145c:	d025      	beq.n	80014aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800145e:	bb53      	cbnz	r3, 80014b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 8001460:	bb56      	cbnz	r6, 80014b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001464:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8001466:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001468:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800146c:	430b      	orrs	r3, r1
 800146e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	01db      	lsls	r3, r3, #7
 8001474:	d532      	bpl.n	80014dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 8001476:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001478:	2b03      	cmp	r3, #3
 800147a:	f200 808a 	bhi.w	8001592 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800147e:	e8df f003 	tbb	[pc, r3]
 8001482:	1f24      	.short	0x1f24
 8001484:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001486:	2101      	movs	r1, #1
 8001488:	1d28      	adds	r0, r5, #4
 800148a:	f7ff fd6b 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800148e:	4606      	mov	r6, r0
      break;
 8001490:	e7d1      	b.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001492:	2101      	movs	r1, #1
 8001494:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001498:	f7ff fdca 	bl	8001030 <RCCEx_PLL3_Config>
 800149c:	e7f7      	b.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800149e:	4a6f      	ldr	r2, [pc, #444]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80014a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80014a8:	e7da      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80014aa:	2101      	movs	r1, #1
 80014ac:	1d28      	adds	r0, r5, #4
 80014ae:	f7ff fd59 	bl	8000f64 <RCCEx_PLL2_Config>
 80014b2:	4606      	mov	r6, r0
      break;
 80014b4:	e7d4      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 80014b6:	2601      	movs	r6, #1
      status |= ret;
 80014b8:	ea44 0006 	orr.w	r0, r4, r6
 80014bc:	b2c4      	uxtb	r4, r0
 80014be:	e7d7      	b.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014c0:	4a66      	ldr	r2, [pc, #408]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80014c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80014ca:	2e00      	cmp	r6, #0
 80014cc:	d162      	bne.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80014ce:	4a63      	ldr	r2, [pc, #396]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80014d0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80014d2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80014d4:	f023 0303 	bic.w	r3, r3, #3
 80014d8:	430b      	orrs	r3, r1
 80014da:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80014dc:	682b      	ldr	r3, [r5, #0]
 80014de:	025f      	lsls	r7, r3, #9
 80014e0:	d542      	bpl.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e2:	4f5f      	ldr	r7, [pc, #380]	; (8001660 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80014ec:	f7fe ff14 	bl	8000318 <HAL_GetTick>
 80014f0:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	05d8      	lsls	r0, r3, #23
 80014f6:	d551      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d156      	bne.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80014fe:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8001502:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001504:	4042      	eors	r2, r0
 8001506:	f412 7f40 	tst.w	r2, #768	; 0x300
 800150a:	d00b      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800150c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800150e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001510:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001514:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001518:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800151a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800151c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001520:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001522:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001524:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001528:	d108      	bne.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 800152a:	f7fe fef5 	bl	8000318 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	4f4b      	ldr	r7, [pc, #300]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 8001530:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001538:	0799      	lsls	r1, r3, #30
 800153a:	d53a      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800153c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8001540:	4946      	ldr	r1, [pc, #280]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001542:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001546:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800154a:	d13d      	bne.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800154c:	6908      	ldr	r0, [r1, #16]
 800154e:	4a45      	ldr	r2, [pc, #276]	; (8001664 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001550:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001554:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001558:	4302      	orrs	r2, r0
 800155a:	610a      	str	r2, [r1, #16]
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	4a3e      	ldr	r2, [pc, #248]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001562:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001564:	430b      	orrs	r3, r1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	07da      	lsls	r2, r3, #31
 800156c:	d53f      	bpl.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 800156e:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8001570:	2b10      	cmp	r3, #16
 8001572:	d04d      	beq.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001574:	d82c      	bhi.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001576:	b38b      	cbz	r3, 80015dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001578:	2b08      	cmp	r3, #8
 800157a:	d043      	beq.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 800157c:	2601      	movs	r6, #1
      status |= ret;
 800157e:	ea44 0006 	orr.w	r0, r4, r6
 8001582:	b2c4      	uxtb	r4, r0
 8001584:	e033      	b.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001586:	2102      	movs	r1, #2
 8001588:	1d28      	adds	r0, r5, #4
 800158a:	f7ff fceb 	bl	8000f64 <RCCEx_PLL2_Config>
 800158e:	4606      	mov	r6, r0
      break;
 8001590:	e79b      	b.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 8001592:	2601      	movs	r6, #1
      status |= ret;
 8001594:	ea44 0006 	orr.w	r0, r4, r6
 8001598:	b2c4      	uxtb	r4, r0
 800159a:	e79f      	b.n	80014dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159c:	f7fe febc 	bl	8000318 <HAL_GetTick>
 80015a0:	eba0 0008 	sub.w	r0, r0, r8
 80015a4:	2864      	cmp	r0, #100	; 0x64
 80015a6:	d9a4      	bls.n	80014f2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 80015a8:	2603      	movs	r6, #3
      status |= ret;
 80015aa:	ea44 0006 	orr.w	r0, r4, r6
 80015ae:	b2c4      	uxtb	r4, r0
 80015b0:	e7da      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7fe feb1 	bl	8000318 <HAL_GetTick>
 80015b6:	eba0 0008 	sub.w	r0, r0, r8
 80015ba:	4548      	cmp	r0, r9
 80015bc:	d9bb      	bls.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 80015be:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 80015c2:	2603      	movs	r6, #3
        status |= ret;
 80015c4:	b2c4      	uxtb	r4, r0
 80015c6:	e7cf      	b.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015c8:	690a      	ldr	r2, [r1, #16]
 80015ca:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80015ce:	e7c4      	b.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d003      	beq.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80015d4:	2b28      	cmp	r3, #40	; 0x28
 80015d6:	d001      	beq.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80015d8:	2b18      	cmp	r3, #24
 80015da:	d1cf      	bne.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 80015dc:	2e00      	cmp	r6, #0
 80015de:	d1ce      	bne.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80015e0:	4a1e      	ldr	r2, [pc, #120]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80015e2:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80015e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80015e6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80015ea:	430b      	orrs	r3, r1
 80015ec:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	079b      	lsls	r3, r3, #30
 80015f2:	d520      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80015f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d836      	bhi.n	8001668 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80015fa:	e8df f003 	tbb	[pc, r3]
 80015fe:	0f14      	.short	0x0f14
 8001600:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001604:	2101      	movs	r1, #1
 8001606:	1d28      	adds	r0, r5, #4
 8001608:	f7ff fcac 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800160c:	4606      	mov	r6, r0
      break;
 800160e:	e7e5      	b.n	80015dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001610:	2101      	movs	r1, #1
 8001612:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001616:	f7ff fd0b 	bl	8001030 <RCCEx_PLL3_Config>
 800161a:	e7f7      	b.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800161c:	2101      	movs	r1, #1
 800161e:	1d28      	adds	r0, r5, #4
 8001620:	f7ff fca0 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001624:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001626:	bb06      	cbnz	r6, 800166a <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001628:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800162a:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800162c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800162e:	f023 0307 	bic.w	r3, r3, #7
 8001632:	430b      	orrs	r3, r1
 8001634:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	075f      	lsls	r7, r3, #29
 800163a:	d528      	bpl.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800163c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001640:	2b05      	cmp	r3, #5
 8001642:	d83c      	bhi.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8001644:	e8df f003 	tbb	[pc, r3]
 8001648:	1a35151a 	.word	0x1a35151a
 800164c:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800164e:	2101      	movs	r1, #1
 8001650:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001654:	f7ff fcec 	bl	8001030 <RCCEx_PLL3_Config>
 8001658:	e7e4      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800165a:	bf00      	nop
 800165c:	58024400 	.word	0x58024400
 8001660:	58024800 	.word	0x58024800
 8001664:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8001668:	2601      	movs	r6, #1
      status |= ret;
 800166a:	ea44 0006 	orr.w	r0, r4, r6
 800166e:	b2c4      	uxtb	r4, r0
 8001670:	e7e1      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001672:	2101      	movs	r1, #1
 8001674:	1d28      	adds	r0, r5, #4
 8001676:	f7ff fc75 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800167a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800167c:	bb06      	cbnz	r6, 80016c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800167e:	4a99      	ldr	r2, [pc, #612]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001680:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8001684:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001686:	f023 0307 	bic.w	r3, r3, #7
 800168a:	430b      	orrs	r3, r1
 800168c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	0698      	lsls	r0, r3, #26
 8001692:	d52c      	bpl.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001694:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800169c:	d03f      	beq.n	800171e <HAL_RCCEx_PeriphCLKConfig+0x622>
 800169e:	d813      	bhi.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80016a0:	b1db      	cbz	r3, 80016da <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80016a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016a6:	d034      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 80016a8:	2601      	movs	r6, #1
      status |= ret;
 80016aa:	ea44 0006 	orr.w	r0, r4, r6
 80016ae:	b2c4      	uxtb	r4, r0
 80016b0:	e01d      	b.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80016b2:	2101      	movs	r1, #1
 80016b4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80016b8:	f7ff fcba 	bl	8001030 <RCCEx_PLL3_Config>
 80016bc:	e7dd      	b.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 80016be:	2601      	movs	r6, #1
      status |= ret;
 80016c0:	ea44 0006 	orr.w	r0, r4, r6
 80016c4:	b2c4      	uxtb	r4, r0
 80016c6:	e7e2      	b.n	800168e <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80016c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016cc:	d005      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80016ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d2:	d002      	beq.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80016d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80016d8:	d1e6      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 80016da:	2e00      	cmp	r6, #0
 80016dc:	d1e5      	bne.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80016de:	4a81      	ldr	r2, [pc, #516]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80016e0:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80016e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80016e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80016ea:	430b      	orrs	r3, r1
 80016ec:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	0659      	lsls	r1, r3, #25
 80016f2:	d52d      	bpl.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80016f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80016f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fc:	d042      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80016fe:	d814      	bhi.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8001700:	b1e3      	cbz	r3, 800173c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001706:	d037      	beq.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 8001708:	2601      	movs	r6, #1
      status |= ret;
 800170a:	ea44 0006 	orr.w	r0, r4, r6
 800170e:	b2c4      	uxtb	r4, r0
 8001710:	e01e      	b.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001712:	2100      	movs	r1, #0
 8001714:	1d28      	adds	r0, r5, #4
 8001716:	f7ff fc25 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800171a:	4606      	mov	r6, r0
      break;
 800171c:	e7dd      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800171e:	2102      	movs	r1, #2
 8001720:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001724:	f7ff fc84 	bl	8001030 <RCCEx_PLL3_Config>
 8001728:	e7f7      	b.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800172a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800172e:	d005      	beq.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001730:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001734:	d002      	beq.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800173a:	d1e5      	bne.n	8001708 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 800173c:	2e00      	cmp	r6, #0
 800173e:	d1e4      	bne.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001740:	4a68      	ldr	r2, [pc, #416]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001742:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8001746:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001748:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800174c:	430b      	orrs	r3, r1
 800174e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	061a      	lsls	r2, r3, #24
 8001754:	d52f      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001756:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800175a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800175e:	f000 8095 	beq.w	800188c <HAL_RCCEx_PeriphCLKConfig+0x790>
 8001762:	d815      	bhi.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8001764:	b1eb      	cbz	r3, 80017a2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800176a:	f000 8089 	beq.w	8001880 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 800176e:	2601      	movs	r6, #1
      status |= ret;
 8001770:	ea44 0006 	orr.w	r0, r4, r6
 8001774:	b2c4      	uxtb	r4, r0
 8001776:	e01e      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001778:	2100      	movs	r1, #0
 800177a:	1d28      	adds	r0, r5, #4
 800177c:	f7ff fbf2 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001780:	4606      	mov	r6, r0
      break;
 8001782:	e7db      	b.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001784:	2102      	movs	r1, #2
 8001786:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800178a:	f7ff fc51 	bl	8001030 <RCCEx_PLL3_Config>
 800178e:	e7f7      	b.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001794:	d005      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001796:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800179a:	d002      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800179c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80017a0:	d1e5      	bne.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d1e4      	bne.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80017a6:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80017a8:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80017ac:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80017ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80017b2:	430b      	orrs	r3, r1
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	071b      	lsls	r3, r3, #28
 80017ba:	d50b      	bpl.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80017bc:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80017c0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80017c4:	d168      	bne.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80017c6:	2102      	movs	r1, #2
 80017c8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80017cc:	f7ff fc30 	bl	8001030 <RCCEx_PLL3_Config>
 80017d0:	4304      	orrs	r4, r0
 80017d2:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017d4:	682b      	ldr	r3, [r5, #0]
 80017d6:	06df      	lsls	r7, r3, #27
 80017d8:	d50b      	bpl.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80017da:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80017de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80017e2:	d160      	bne.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80017e4:	2102      	movs	r1, #2
 80017e6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80017ea:	f7ff fc21 	bl	8001030 <RCCEx_PLL3_Config>
 80017ee:	4304      	orrs	r4, r0
 80017f0:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80017f2:	682b      	ldr	r3, [r5, #0]
 80017f4:	0318      	lsls	r0, r3, #12
 80017f6:	d517      	bpl.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 80017f8:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80017fc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001800:	d058      	beq.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8001802:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001806:	d005      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001808:	2900      	cmp	r1, #0
 800180a:	d159      	bne.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800180c:	1d28      	adds	r0, r5, #4
 800180e:	f7ff fba9 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001812:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001814:	2e00      	cmp	r6, #0
 8001816:	d154      	bne.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001818:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800181a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800181e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001820:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001824:	430b      	orrs	r3, r1
 8001826:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	0359      	lsls	r1, r3, #13
 800182c:	d519      	bpl.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 800182e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001836:	d048      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800183c:	d007      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x752>
 800183e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001842:	d149      	bne.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001844:	4a27      	ldr	r2, [pc, #156]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001846:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800184c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800184e:	2e00      	cmp	r6, #0
 8001850:	d143      	bne.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001854:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8001858:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800185a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800185e:	430b      	orrs	r3, r1
 8001860:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	03da      	lsls	r2, r3, #15
 8001866:	d54d      	bpl.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001868:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03c      	beq.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	f000 8099 	beq.w	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8001876:	2601      	movs	r6, #1
      status |= ret;
 8001878:	ea44 0006 	orr.w	r0, r4, r6
 800187c:	b2c4      	uxtb	r4, r0
 800187e:	e041      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001880:	2100      	movs	r1, #0
 8001882:	1d28      	adds	r0, r5, #4
 8001884:	f7ff fb6e 	bl	8000f64 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001888:	4606      	mov	r6, r0
      break;
 800188a:	e78a      	b.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800188c:	2102      	movs	r1, #2
 800188e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001892:	f7ff fbcd 	bl	8001030 <RCCEx_PLL3_Config>
 8001896:	e7f7      	b.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800189a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800189c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6553      	str	r3, [r2, #84]	; 0x54
 80018a4:	e796      	b.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80018a6:	4a0f      	ldr	r2, [pc, #60]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80018a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80018aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ae:	430b      	orrs	r3, r1
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
 80018b2:	e79e      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80018b4:	2102      	movs	r1, #2
 80018b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80018ba:	f7ff fbb9 	bl	8001030 <RCCEx_PLL3_Config>
 80018be:	e7a8      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 80018c0:	2601      	movs	r6, #1
      status |= ret;
 80018c2:	ea44 0006 	orr.w	r0, r4, r6
 80018c6:	b2c4      	uxtb	r4, r0
 80018c8:	e7ae      	b.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80018ca:	2101      	movs	r1, #1
 80018cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80018d0:	f7ff fbae 	bl	8001030 <RCCEx_PLL3_Config>
 80018d4:	4606      	mov	r6, r0
      break;
 80018d6:	e7ba      	b.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 80018d8:	2601      	movs	r6, #1
      status |= ret;
 80018da:	ea44 0006 	orr.w	r0, r4, r6
 80018de:	b2c4      	uxtb	r4, r0
 80018e0:	e7bf      	b.n	8001862 <HAL_RCCEx_PeriphCLKConfig+0x766>
 80018e2:	bf00      	nop
 80018e4:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018e8:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80018ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80018f2:	2e00      	cmp	r6, #0
 80018f4:	d1c0      	bne.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80018f6:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80018f8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80018fa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	430b      	orrs	r3, r1
 8001902:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	d506      	bpl.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800190a:	2102      	movs	r1, #2
 800190c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001910:	f7ff fb8e 	bl	8001030 <RCCEx_PLL3_Config>
 8001914:	4304      	orrs	r4, r0
 8001916:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001918:	682b      	ldr	r3, [r5, #0]
 800191a:	039f      	lsls	r7, r3, #14
 800191c:	d50e      	bpl.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 800191e:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001920:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001924:	d051      	beq.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8001926:	d845      	bhi.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8001928:	2900      	cmp	r1, #0
 800192a:	d149      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 800192c:	2e00      	cmp	r6, #0
 800192e:	d148      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001930:	4829      	ldr	r0, [pc, #164]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001932:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001934:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001938:	430a      	orrs	r2, r1
 800193a:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800193c:	02de      	lsls	r6, r3, #11
 800193e:	d506      	bpl.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001940:	4925      	ldr	r1, [pc, #148]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001942:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001944:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001946:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194a:	4302      	orrs	r2, r0
 800194c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800194e:	00d8      	lsls	r0, r3, #3
 8001950:	d507      	bpl.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001952:	4921      	ldr	r1, [pc, #132]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001954:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8001958:	690a      	ldr	r2, [r1, #16]
 800195a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800195e:	4302      	orrs	r2, r0
 8001960:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001962:	0299      	lsls	r1, r3, #10
 8001964:	d506      	bpl.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001966:	491c      	ldr	r1, [pc, #112]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001968:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800196a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800196c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001970:	4302      	orrs	r2, r0
 8001972:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8001974:	005a      	lsls	r2, r3, #1
 8001976:	d509      	bpl.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001978:	4a17      	ldr	r2, [pc, #92]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800197a:	6911      	ldr	r1, [r2, #16]
 800197c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001980:	6111      	str	r1, [r2, #16]
 8001982:	6911      	ldr	r1, [r2, #16]
 8001984:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8001988:	4301      	orrs	r1, r0
 800198a:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800198c:	2b00      	cmp	r3, #0
 800198e:	da06      	bge.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001992:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001994:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001996:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800199a:	430b      	orrs	r3, r1
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	1c20      	adds	r0, r4, #0
 80019a0:	bf18      	it	ne
 80019a2:	2001      	movne	r0, #1
}
 80019a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80019a8:	2102      	movs	r1, #2
 80019aa:	1d28      	adds	r0, r5, #4
 80019ac:	f7ff fada 	bl	8000f64 <RCCEx_PLL2_Config>
 80019b0:	4606      	mov	r6, r0
      break;
 80019b2:	e79e      	b.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 80019b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80019b8:	d0b8      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x830>
 80019ba:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80019be:	d0b5      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 80019c0:	2601      	movs	r6, #1
      status |= ret;
 80019c2:	ea44 0006 	orr.w	r0, r4, r6
 80019c6:	b2c4      	uxtb	r4, r0
 80019c8:	e7b8      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80019cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80019ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019d2:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80019d4:	e7aa      	b.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x830>
 80019d6:	bf00      	nop
 80019d8:	58024400 	.word	0x58024400

080019dc <HAL_RCCEx_GetD1SysClockFreq>:
{
 80019dc:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80019de:	f7ff f8f1 	bl	8000bc4 <HAL_RCC_GetSysClockFreq>
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 80019e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	fa92 f2a2 	rbit	r2, r2
 80019ee:	fab2 f282 	clz	r2, r2
 80019f2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80019f6:	40d3      	lsrs	r3, r2
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	40d8      	lsrs	r0, r3
 80019fe:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8001a00:	6018      	str	r0, [r3, #0]
}
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	58024400 	.word	0x58024400
 8001a08:	08002e56 	.word	0x08002e56
 8001a0c:	20000008 	.word	0x20000008

08001a10 <HAL_TIM_Base_MspInit>:
 8001a10:	4770      	bx	lr

08001a12 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a12:	6802      	ldr	r2, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8001a14:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a16:	68d3      	ldr	r3, [r2, #12]
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8001a1e:	8813      	ldrh	r3, [r2, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	8013      	strh	r3, [r2, #0]
}
 8001a28:	4770      	bx	lr

08001a2a <HAL_TIM_OC_DelayElapsedCallback>:
 8001a2a:	4770      	bx	lr

08001a2c <HAL_TIM_IC_CaptureCallback>:
 8001a2c:	4770      	bx	lr

08001a2e <HAL_TIM_PWM_PulseFinishedCallback>:
 8001a2e:	4770      	bx	lr

08001a30 <HAL_TIM_TriggerCallback>:
 8001a30:	4770      	bx	lr

08001a32 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a32:	6803      	ldr	r3, [r0, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	0791      	lsls	r1, r2, #30
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a3c:	d50f      	bpl.n	8001a5e <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	0792      	lsls	r2, r2, #30
 8001a42:	d50c      	bpl.n	8001a5e <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a44:	f06f 0202 	mvn.w	r2, #2
 8001a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a4a:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001a4c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a4e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001a50:	0799      	lsls	r1, r3, #30
 8001a52:	f000 8085 	beq.w	8001b60 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001a56:	f7ff ffe9 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	0752      	lsls	r2, r2, #29
 8001a64:	d510      	bpl.n	8001a88 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	0750      	lsls	r0, r2, #29
 8001a6a:	d50d      	bpl.n	8001a88 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a6c:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a74:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001a76:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a78:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001a7a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001a7e:	d075      	beq.n	8001b6c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a80:	f7ff ffd4 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a84:	2300      	movs	r3, #0
 8001a86:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	0711      	lsls	r1, r2, #28
 8001a8e:	d50f      	bpl.n	8001ab0 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	0712      	lsls	r2, r2, #28
 8001a94:	d50c      	bpl.n	8001ab0 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a96:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001aa0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aa2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001aa4:	079b      	lsls	r3, r3, #30
 8001aa6:	d067      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa8:	f7ff ffc0 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aac:	2300      	movs	r3, #0
 8001aae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	06d0      	lsls	r0, r2, #27
 8001ab6:	d510      	bpl.n	8001ada <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	06d1      	lsls	r1, r2, #27
 8001abc:	d50d      	bpl.n	8001ada <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001abe:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ac2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001ac8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aca:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001acc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ad0:	d058      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad2:	f7ff ffab 	bl	8001a2c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ada:	6823      	ldr	r3, [r4, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	07d2      	lsls	r2, r2, #31
 8001ae0:	d508      	bpl.n	8001af4 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	07d0      	lsls	r0, r2, #31
 8001ae6:	d505      	bpl.n	8001af4 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ae8:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001aec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001aee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001af0:	f001 f874 	bl	8002bdc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	0611      	lsls	r1, r2, #24
 8001afa:	d508      	bpl.n	8001b0e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	0612      	lsls	r2, r2, #24
 8001b00:	d505      	bpl.n	8001b0e <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b02:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001b06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b0a:	f000 f8c6 	bl	8001c9a <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	05d0      	lsls	r0, r2, #23
 8001b14:	d508      	bpl.n	8001b28 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	0611      	lsls	r1, r2, #24
 8001b1a:	d505      	bpl.n	8001b28 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001b20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b24:	f000 f8b9 	bl	8001c9a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	0652      	lsls	r2, r2, #25
 8001b2e:	d508      	bpl.n	8001b42 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	0650      	lsls	r0, r2, #25
 8001b34:	d505      	bpl.n	8001b42 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001b3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001b3e:	f7ff ff77 	bl	8001a30 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b42:	6823      	ldr	r3, [r4, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	0691      	lsls	r1, r2, #26
 8001b48:	d522      	bpl.n	8001b90 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	0692      	lsls	r2, r2, #26
 8001b4e:	d51f      	bpl.n	8001b90 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b50:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001b54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b56:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001b5c:	f000 b89c 	b.w	8001c98 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b60:	f7ff ff63 	bl	8001a2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff ff62 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b6a:	e776      	b.n	8001a5a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6c:	f7ff ff5d 	bl	8001a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff ff5c 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b76:	e785      	b.n	8001a84 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b78:	f7ff ff57 	bl	8001a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	f7ff ff56 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b82:	e793      	b.n	8001aac <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b84:	f7ff ff51 	bl	8001a2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff ff50 	bl	8001a2e <HAL_TIM_PWM_PulseFinishedCallback>
 8001b8e:	e7a2      	b.n	8001ad6 <HAL_TIM_IRQHandler+0xa4>
 8001b90:	bd10      	pop	{r4, pc}
	...

08001b94 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b94:	4a31      	ldr	r2, [pc, #196]	; (8001c5c <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 8001b96:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b98:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8001b9a:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b9c:	d012      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001b9e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ba2:	d00f      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001ba4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001ba8:	4290      	cmp	r0, r2
 8001baa:	d00b      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bb0:	4290      	cmp	r0, r2
 8001bb2:	d007      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bb8:	4290      	cmp	r0, r2
 8001bba:	d003      	beq.n	8001bc4 <TIM_Base_SetConfig+0x30>
 8001bbc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bc0:	4290      	cmp	r0, r2
 8001bc2:	d119      	bne.n	8001bf8 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001bc4:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001bca:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <TIM_Base_SetConfig+0xc8>)
 8001bce:	4290      	cmp	r0, r2
 8001bd0:	d01d      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001bd2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001bd6:	d01a      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001bd8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001bdc:	4290      	cmp	r0, r2
 8001bde:	d016      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001be4:	4290      	cmp	r0, r2
 8001be6:	d012      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bec:	4290      	cmp	r0, r2
 8001bee:	d00e      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001bf0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bf4:	4290      	cmp	r0, r2
 8001bf6:	d00a      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001bf8:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <TIM_Base_SetConfig+0xcc>)
 8001bfa:	4290      	cmp	r0, r2
 8001bfc:	d007      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c02:	4290      	cmp	r0, r2
 8001c04:	d003      	beq.n	8001c0e <TIM_Base_SetConfig+0x7a>
 8001c06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c0a:	4290      	cmp	r0, r2
 8001c0c:	d103      	bne.n	8001c16 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c12:	68ca      	ldr	r2, [r1, #12]
 8001c14:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c16:	694a      	ldr	r2, [r1, #20]
 8001c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c22:	688b      	ldr	r3, [r1, #8]
 8001c24:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c26:	880b      	ldrh	r3, [r1, #0]
 8001c28:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <TIM_Base_SetConfig+0xc8>)
 8001c2c:	4298      	cmp	r0, r3
 8001c2e:	d00f      	beq.n	8001c50 <TIM_Base_SetConfig+0xbc>
 8001c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c34:	4298      	cmp	r0, r3
 8001c36:	d00b      	beq.n	8001c50 <TIM_Base_SetConfig+0xbc>
 8001c38:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8001c3c:	4298      	cmp	r0, r3
 8001c3e:	d007      	beq.n	8001c50 <TIM_Base_SetConfig+0xbc>
 8001c40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c44:	4298      	cmp	r0, r3
 8001c46:	d003      	beq.n	8001c50 <TIM_Base_SetConfig+0xbc>
 8001c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4c:	4298      	cmp	r0, r3
 8001c4e:	d101      	bne.n	8001c54 <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c50:	8a0b      	ldrh	r3, [r1, #16]
 8001c52:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001c54:	2301      	movs	r3, #1
 8001c56:	6143      	str	r3, [r0, #20]
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40014000 	.word	0x40014000

08001c64 <HAL_TIM_Base_Init>:
{ 
 8001c64:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c66:	4604      	mov	r4, r0
 8001c68:	b1a0      	cbz	r0, 8001c94 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c72:	b91b      	cbnz	r3, 8001c7c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c78:	f7ff feca 	bl	8001a10 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c7c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c7e:	6820      	ldr	r0, [r4, #0]
 8001c80:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001c82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c86:	f7ff ff85 	bl	8001b94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c8a:	2301      	movs	r3, #1
  return HAL_OK;
 8001c8c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001c8e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001c92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c94:	2001      	movs	r0, #1
}
 8001c96:	bd10      	pop	{r4, pc}

08001c98 <HAL_TIMEx_CommutationCallback>:
 8001c98:	4770      	bx	lr

08001c9a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c9a:	4770      	bx	lr

08001c9c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c9c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c9e:	f000 fbd9 	bl	8002454 <vTaskStartScheduler>
  
  return osOK;
}
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	bd08      	pop	{r3, pc}

08001ca6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ca6:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ca8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8001cac:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cae:	8a02      	ldrh	r2, [r0, #16]
{
 8001cb0:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8001cb2:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cb4:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8001cb8:	bf14      	ite	ne
 8001cba:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001cbc:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001cbe:	a803      	add	r0, sp, #12
 8001cc0:	9400      	str	r4, [sp, #0]
 8001cc2:	9001      	str	r0, [sp, #4]
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f000 faf5 	bl	80022b4 <xTaskCreate>
 8001cca:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ccc:	bf0c      	ite	eq
 8001cce:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001cd0:	2000      	movne	r0, #0
}
 8001cd2:	b005      	add	sp, #20
 8001cd4:	bd30      	pop	{r4, r5, pc}

08001cd6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	bf08      	it	eq
 8001cda:	2001      	moveq	r0, #1
{
 8001cdc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001cde:	f000 fd0f 	bl	8002700 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	bd08      	pop	{r3, pc}

08001ce6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001ce6:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ce8:	f000 fda6 	bl	8002838 <xTaskGetSchedulerState>
 8001cec:	2801      	cmp	r0, #1
 8001cee:	d003      	beq.n	8001cf8 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001cf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8001cf4:	f000 ba06 	b.w	8002104 <xPortSysTickHandler>
 8001cf8:	bd08      	pop	{r3, pc}
	...

08001cfc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <prvInsertBlockIntoFreeList+0x40>)
{
 8001cfe:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4282      	cmp	r2, r0
 8001d04:	d318      	bcc.n	8001d38 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d06:	685c      	ldr	r4, [r3, #4]
 8001d08:	1919      	adds	r1, r3, r4
 8001d0a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d0c:	bf01      	itttt	eq
 8001d0e:	6841      	ldreq	r1, [r0, #4]
 8001d10:	4618      	moveq	r0, r3
 8001d12:	1909      	addeq	r1, r1, r4
 8001d14:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d16:	6844      	ldr	r4, [r0, #4]
 8001d18:	1901      	adds	r1, r0, r4
 8001d1a:	428a      	cmp	r2, r1
 8001d1c:	d107      	bne.n	8001d2e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d1e:	4908      	ldr	r1, [pc, #32]	; (8001d40 <prvInsertBlockIntoFreeList+0x44>)
 8001d20:	6809      	ldr	r1, [r1, #0]
 8001d22:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d24:	bf1f      	itttt	ne
 8001d26:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d28:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d2a:	1909      	addne	r1, r1, r4
 8001d2c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d2e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d30:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d32:	bf18      	it	ne
 8001d34:	6018      	strne	r0, [r3, #0]
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	4613      	mov	r3, r2
 8001d3a:	e7e1      	b.n	8001d00 <prvInsertBlockIntoFreeList+0x4>
 8001d3c:	20003c40 	.word	0x20003c40
 8001d40:	20000030 	.word	0x20000030

08001d44 <pvPortMalloc>:
{
 8001d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d48:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001d4a:	f000 fbc3 	bl	80024d4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001d4e:	4940      	ldr	r1, [pc, #256]	; (8001e50 <pvPortMalloc+0x10c>)
 8001d50:	4d40      	ldr	r5, [pc, #256]	; (8001e54 <pvPortMalloc+0x110>)
 8001d52:	680b      	ldr	r3, [r1, #0]
 8001d54:	bb0b      	cbnz	r3, 8001d9a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001d56:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001d58:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d5a:	4e40      	ldr	r6, [pc, #256]	; (8001e5c <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001d5c:	bf1b      	ittet	ne
 8001d5e:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d60:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001d64:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d68:	f020 0007 	bicne.w	r0, r0, #7
 8001d6c:	bf1c      	itt	ne
 8001d6e:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001d70:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001d72:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001d74:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001d76:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001d78:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8001d7a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001d7c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8001d80:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001d82:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d84:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8001d86:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001d88:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001d8c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d8e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <pvPortMalloc+0x120>)
 8001d92:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001d98:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001d9a:	682f      	ldr	r7, [r5, #0]
 8001d9c:	4227      	tst	r7, r4
 8001d9e:	d116      	bne.n	8001dce <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d042      	beq.n	8001e2a <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8001da4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001da8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001daa:	bf1c      	itt	ne
 8001dac:	f023 0307 	bicne.w	r3, r3, #7
 8001db0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001db2:	b163      	cbz	r3, 8001dce <pvPortMalloc+0x8a>
 8001db4:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <pvPortMalloc+0x120>)
 8001db6:	6816      	ldr	r6, [r2, #0]
 8001db8:	4690      	mov	r8, r2
 8001dba:	42b3      	cmp	r3, r6
 8001dbc:	d807      	bhi.n	8001dce <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <pvPortMalloc+0x118>)
 8001dc0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dc2:	6868      	ldr	r0, [r5, #4]
 8001dc4:	4283      	cmp	r3, r0
 8001dc6:	d804      	bhi.n	8001dd2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001dc8:	6809      	ldr	r1, [r1, #0]
 8001dca:	428d      	cmp	r5, r1
 8001dcc:	d107      	bne.n	8001dde <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001dce:	2400      	movs	r4, #0
 8001dd0:	e02b      	b.n	8001e2a <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001dd2:	682c      	ldr	r4, [r5, #0]
 8001dd4:	2c00      	cmp	r4, #0
 8001dd6:	d0f7      	beq.n	8001dc8 <pvPortMalloc+0x84>
 8001dd8:	462a      	mov	r2, r5
 8001dda:	4625      	mov	r5, r4
 8001ddc:	e7f1      	b.n	8001dc2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dde:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001de0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001de2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001de4:	1ac2      	subs	r2, r0, r3
 8001de6:	2a10      	cmp	r2, #16
 8001de8:	d911      	bls.n	8001e0e <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001dea:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001dec:	0741      	lsls	r1, r0, #29
 8001dee:	d00a      	beq.n	8001e06 <pvPortMalloc+0xc2>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df4:	b672      	cpsid	i
 8001df6:	f383 8811 	msr	BASEPRI, r3
 8001dfa:	f3bf 8f6f 	isb	sy
 8001dfe:	f3bf 8f4f 	dsb	sy
 8001e02:	b662      	cpsie	i
 8001e04:	e7fe      	b.n	8001e04 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e06:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001e08:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001e0a:	f7ff ff77 	bl	8001cfc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e0e:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001e10:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e12:	4913      	ldr	r1, [pc, #76]	; (8001e60 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e14:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e16:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e18:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8001e1a:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e1c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e20:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001e22:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001e24:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e26:	bf38      	it	cc
 8001e28:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8001e2a:	f000 fbef 	bl	800260c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e2e:	0763      	lsls	r3, r4, #29
 8001e30:	d00a      	beq.n	8001e48 <pvPortMalloc+0x104>
 8001e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e36:	b672      	cpsid	i
 8001e38:	f383 8811 	msr	BASEPRI, r3
 8001e3c:	f3bf 8f6f 	isb	sy
 8001e40:	f3bf 8f4f 	dsb	sy
 8001e44:	b662      	cpsie	i
 8001e46:	e7fe      	b.n	8001e46 <pvPortMalloc+0x102>
}
 8001e48:	4620      	mov	r0, r4
 8001e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000030 	.word	0x20000030
 8001e54:	20003c34 	.word	0x20003c34
 8001e58:	20000034 	.word	0x20000034
 8001e5c:	20003c40 	.word	0x20003c40
 8001e60:	20003c3c 	.word	0x20003c3c
 8001e64:	20003c38 	.word	0x20003c38

08001e68 <vPortFree>:
{
 8001e68:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d032      	beq.n	8001ed6 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001e70:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <vPortFree+0x70>)
 8001e72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	4213      	tst	r3, r2
 8001e7a:	d10a      	bne.n	8001e92 <vPortFree+0x2a>
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	b672      	cpsid	i
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	b662      	cpsie	i
 8001e90:	e7fe      	b.n	8001e90 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e92:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001e96:	b151      	cbz	r1, 8001eae <vPortFree+0x46>
 8001e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9c:	b672      	cpsid	i
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	b662      	cpsie	i
 8001eac:	e7fe      	b.n	8001eac <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001eae:	ea23 0302 	bic.w	r3, r3, r2
 8001eb2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001eb6:	f000 fb0d 	bl	80024d4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <vPortFree+0x74>)
 8001ebc:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001ec0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	440b      	add	r3, r1
 8001ec8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001eca:	f7ff ff17 	bl	8001cfc <prvInsertBlockIntoFreeList>
}
 8001ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001ed2:	f000 bb9b 	b.w	800260c <xTaskResumeAll>
 8001ed6:	bd10      	pop	{r4, pc}
 8001ed8:	20003c34 	.word	0x20003c34
 8001edc:	20003c38 	.word	0x20003c38

08001ee0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ee4:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee8:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eea:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eec:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001eee:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ef0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ef2:	6003      	str	r3, [r0, #0]
 8001ef4:	4770      	bx	lr

08001ef6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	6103      	str	r3, [r0, #16]
 8001efa:	4770      	bx	lr

08001efc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001efc:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001efe:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001f00:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f08:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f0a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f0c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f0e:	3301      	adds	r3, #1
 8001f10:	6003      	str	r3, [r0, #0]
 8001f12:	4770      	bx	lr

08001f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f14:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f16:	1c53      	adds	r3, r2, #1
{
 8001f18:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f1a:	d10a      	bne.n	8001f32 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f1c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f22:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f24:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f26:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f28:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f2a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	6003      	str	r3, [r0, #0]
 8001f30:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f32:	f100 0308 	add.w	r3, r0, #8
 8001f36:	685c      	ldr	r4, [r3, #4]
 8001f38:	6825      	ldr	r5, [r4, #0]
 8001f3a:	42aa      	cmp	r2, r5
 8001f3c:	d3ef      	bcc.n	8001f1e <vListInsert+0xa>
 8001f3e:	4623      	mov	r3, r4
 8001f40:	e7f9      	b.n	8001f36 <vListInsert+0x22>

08001f42 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f42:	6841      	ldr	r1, [r0, #4]
 8001f44:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f46:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f48:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f4a:	6882      	ldr	r2, [r0, #8]
 8001f4c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f52:	bf08      	it	eq
 8001f54:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f56:	2200      	movs	r2, #0
 8001f58:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	3801      	subs	r0, #1
 8001f5e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001f60:	4770      	bx	lr
	...

08001f64 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <prvTaskExitError+0x34>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	d00a      	beq.n	8001f82 <prvTaskExitError+0x1e>
 8001f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f70:	b672      	cpsid	i
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	b662      	cpsie	i
 8001f80:	e7fe      	b.n	8001f80 <prvTaskExitError+0x1c>
 8001f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f86:	b672      	cpsid	i
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	b662      	cpsie	i
 8001f96:	e7fe      	b.n	8001f96 <prvTaskExitError+0x32>
 8001f98:	20000004 	.word	0x20000004

08001f9c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001f9c:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <prvPortStartFirstTask+0x1c>)
 8001f9e:	6800      	ldr	r0, [r0, #0]
 8001fa0:	6800      	ldr	r0, [r0, #0]
 8001fa2:	f380 8808 	msr	MSP, r0
 8001fa6:	b662      	cpsie	i
 8001fa8:	b661      	cpsie	f
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	df00      	svc	0
 8001fb4:	bf00      	nop
 8001fb6:	0000      	.short	0x0000
 8001fb8:	e000ed08 	.word	0xe000ed08

08001fbc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001fbc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001fcc <vPortEnableVFP+0x10>
 8001fc0:	6801      	ldr	r1, [r0, #0]
 8001fc2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001fc6:	6001      	str	r1, [r0, #0]
 8001fc8:	4770      	bx	lr
 8001fca:	0000      	.short	0x0000
 8001fcc:	e000ed88 	.word	0xe000ed88

08001fd0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fd4:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fd8:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001fdc:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001fde:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fe2:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001fe4:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001fe6:	f06f 0302 	mvn.w	r3, #2
 8001fea:	6203      	str	r3, [r0, #32]
}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	08001f65 	.word	0x08001f65
	...

08002000 <SVC_Handler>:
	__asm volatile (
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <pxCurrentTCBConst2>)
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	6808      	ldr	r0, [r1, #0]
 8002006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800200a:	f380 8809 	msr	PSP, r0
 800200e:	f3bf 8f6f 	isb	sy
 8002012:	f04f 0000 	mov.w	r0, #0
 8002016:	f380 8811 	msr	BASEPRI, r0
 800201a:	4770      	bx	lr
 800201c:	f3af 8000 	nop.w

08002020 <pxCurrentTCBConst2>:
 8002020:	20003c50 	.word	0x20003c50

08002024 <vPortEnterCritical>:
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	b672      	cpsid	i
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	b662      	cpsie	i
	uxCriticalNesting++;
 8002038:	4a0b      	ldr	r2, [pc, #44]	; (8002068 <vPortEnterCritical+0x44>)
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800203e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002042:	d10f      	bne.n	8002064 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002044:	4b09      	ldr	r3, [pc, #36]	; (800206c <vPortEnterCritical+0x48>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f013 0fff 	tst.w	r3, #255	; 0xff
 800204c:	d00a      	beq.n	8002064 <vPortEnterCritical+0x40>
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	b672      	cpsid	i
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	b662      	cpsie	i
 8002062:	e7fe      	b.n	8002062 <vPortEnterCritical+0x3e>
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000004 	.word	0x20000004
 800206c:	e000ed04 	.word	0xe000ed04

08002070 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <vPortExitCritical+0x28>)
 8002072:	6813      	ldr	r3, [r2, #0]
 8002074:	b953      	cbnz	r3, 800208c <vPortExitCritical+0x1c>
 8002076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800207a:	b672      	cpsid	i
 800207c:	f383 8811 	msr	BASEPRI, r3
 8002080:	f3bf 8f6f 	isb	sy
 8002084:	f3bf 8f4f 	dsb	sy
 8002088:	b662      	cpsie	i
 800208a:	e7fe      	b.n	800208a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800208c:	3b01      	subs	r3, #1
 800208e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002090:	b90b      	cbnz	r3, 8002096 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	4770      	bx	lr
 8002098:	20000004 	.word	0x20000004
 800209c:	00000000 	.word	0x00000000

080020a0 <PendSV_Handler>:
	__asm volatile
 80020a0:	f3ef 8009 	mrs	r0, PSP
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <pxCurrentTCBConst>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f01e 0f10 	tst.w	lr, #16
 80020b0:	bf08      	it	eq
 80020b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80020b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ba:	6010      	str	r0, [r2, #0]
 80020bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80020c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80020c4:	b672      	cpsid	i
 80020c6:	f380 8811 	msr	BASEPRI, r0
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	b662      	cpsie	i
 80020d4:	f000 fb74 	bl	80027c0 <vTaskSwitchContext>
 80020d8:	f04f 0000 	mov.w	r0, #0
 80020dc:	f380 8811 	msr	BASEPRI, r0
 80020e0:	bc08      	pop	{r3}
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	6808      	ldr	r0, [r1, #0]
 80020e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020ea:	f01e 0f10 	tst.w	lr, #16
 80020ee:	bf08      	it	eq
 80020f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020f4:	f380 8809 	msr	PSP, r0
 80020f8:	f3bf 8f6f 	isb	sy
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop

08002100 <pxCurrentTCBConst>:
 8002100:	20003c50 	.word	0x20003c50

08002104 <xPortSysTickHandler>:
{
 8002104:	b508      	push	{r3, lr}
	__asm volatile
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	b672      	cpsid	i
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800211a:	f000 f9e3 	bl	80024e4 <xTaskIncrementTick>
 800211e:	b118      	cbz	r0, 8002128 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <xPortSysTickHandler+0x2c>)
 8002126:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002128:	2300      	movs	r3, #0
 800212a:	f383 8811 	msr	BASEPRI, r3
 800212e:	bd08      	pop	{r3, pc}
 8002130:	e000ed04 	.word	0xe000ed04

08002134 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <vPortSetupTimerInterrupt+0x1c>)
 8002136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <vPortSetupTimerInterrupt+0x20>)
 8002142:	3b01      	subs	r3, #1
 8002144:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002146:	2207      	movs	r2, #7
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <vPortSetupTimerInterrupt+0x24>)
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	e000e014 	.word	0xe000e014
 8002158:	e000e010 	.word	0xe000e010

0800215c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <xPortStartScheduler+0x90>)
{
 800215e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002160:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002162:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002168:	22ff      	movs	r2, #255	; 0xff
 800216a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800216c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800216e:	4a20      	ldr	r2, [pc, #128]	; (80021f0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002176:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800217a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800217e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002180:	2207      	movs	r2, #7
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <xPortStartScheduler+0x98>)
 8002184:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002186:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800218a:	1e54      	subs	r4, r2, #1
 800218c:	0600      	lsls	r0, r0, #24
 800218e:	d423      	bmi.n	80021d8 <xPortStartScheduler+0x7c>
 8002190:	b101      	cbz	r1, 8002194 <xPortStartScheduler+0x38>
 8002192:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002198:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800219c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800219e:	9b01      	ldr	r3, [sp, #4]
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <xPortStartScheduler+0x90>)
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <xPortStartScheduler+0x9c>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80021ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80021b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80021b8:	f7ff ffbc 	bl	8002134 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80021bc:	2200      	movs	r2, #0
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <xPortStartScheduler+0xa0>)
 80021c0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 80021c2:	f7ff fefb 	bl	8001fbc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <xPortStartScheduler+0xa4>)
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80021ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80021d0:	f7ff fee4 	bl	8001f9c <prvPortStartFirstTask>
	prvTaskExitError();
 80021d4:	f7ff fec6 	bl	8001f64 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80021dc:	2101      	movs	r1, #1
 80021de:	0052      	lsls	r2, r2, #1
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f88d 2003 	strb.w	r2, [sp, #3]
 80021e6:	4622      	mov	r2, r4
 80021e8:	e7cd      	b.n	8002186 <xPortStartScheduler+0x2a>
 80021ea:	bf00      	nop
 80021ec:	e000e400 	.word	0xe000e400
 80021f0:	20003c48 	.word	0x20003c48
 80021f4:	20003c4c 	.word	0x20003c4c
 80021f8:	e000ed20 	.word	0xe000ed20
 80021fc:	20000004 	.word	0x20000004
 8002200:	e000ef34 	.word	0xe000ef34

08002204 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002204:	4a06      	ldr	r2, [pc, #24]	; (8002220 <prvResetNextTaskUnblockTime+0x1c>)
 8002206:	6813      	ldr	r3, [r2, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <prvResetNextTaskUnblockTime+0x20>)
 800220c:	b919      	cbnz	r1, 8002216 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800220e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800221a:	68d2      	ldr	r2, [r2, #12]
 800221c:	6852      	ldr	r2, [r2, #4]
 800221e:	e7f8      	b.n	8002212 <prvResetNextTaskUnblockTime+0xe>
 8002220:	20003c54 	.word	0x20003c54
 8002224:	20003d2c 	.word	0x20003d2c

08002228 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800222a:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800222c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800222e:	4e1b      	ldr	r6, [pc, #108]	; (800229c <prvAddCurrentTaskToDelayedList+0x74>)
{
 8002230:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8002232:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002234:	6830      	ldr	r0, [r6, #0]
 8002236:	3004      	adds	r0, #4
 8002238:	f7ff fe83 	bl	8001f42 <uxListRemove>
 800223c:	4633      	mov	r3, r6
 800223e:	b940      	cbnz	r0, 8002252 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002240:	6831      	ldr	r1, [r6, #0]
 8002242:	2001      	movs	r0, #1
 8002244:	4e16      	ldr	r6, [pc, #88]	; (80022a0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002246:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002248:	6832      	ldr	r2, [r6, #0]
 800224a:	4088      	lsls	r0, r1
 800224c:	ea22 0200 	bic.w	r2, r2, r0
 8002250:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002252:	1c62      	adds	r2, r4, #1
 8002254:	d107      	bne.n	8002266 <prvAddCurrentTaskToDelayedList+0x3e>
 8002256:	b137      	cbz	r7, 8002266 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	4812      	ldr	r0, [pc, #72]	; (80022a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800225c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800225e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002262:	f7ff be4b 	b.w	8001efc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002266:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002268:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800226a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800226c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800226e:	d907      	bls.n	8002280 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <prvAddCurrentTaskToDelayedList+0x80>)
 8002272:	6810      	ldr	r0, [r2, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
}
 8002276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800227a:	3104      	adds	r1, #4
 800227c:	f7ff be4a 	b.w	8001f14 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <prvAddCurrentTaskToDelayedList+0x84>)
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	3104      	adds	r1, #4
 8002288:	f7ff fe44 	bl	8001f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <prvAddCurrentTaskToDelayedList+0x88>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4294      	cmp	r4, r2
 8002292:	d200      	bcs.n	8002296 <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8002294:	601c      	str	r4, [r3, #0]
 8002296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002298:	20003d74 	.word	0x20003d74
 800229c:	20003c50 	.word	0x20003c50
 80022a0:	20003cfc 	.word	0x20003cfc
 80022a4:	20003d4c 	.word	0x20003d4c
 80022a8:	20003c58 	.word	0x20003c58
 80022ac:	20003c54 	.word	0x20003c54
 80022b0:	20003d2c 	.word	0x20003d2c

080022b4 <xTaskCreate>:
	{
 80022b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80022bc:	4680      	mov	r8, r0
 80022be:	460f      	mov	r7, r1
 80022c0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c2:	4650      	mov	r0, sl
	{
 80022c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c6:	f7ff fd3d 	bl	8001d44 <pvPortMalloc>
			if( pxStack != NULL )
 80022ca:	4605      	mov	r5, r0
 80022cc:	2800      	cmp	r0, #0
 80022ce:	f000 8096 	beq.w	80023fe <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80022d2:	2054      	movs	r0, #84	; 0x54
 80022d4:	f7ff fd36 	bl	8001d44 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80022d8:	4604      	mov	r4, r0
 80022da:	2800      	cmp	r0, #0
 80022dc:	f000 808c 	beq.w	80023f8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80022e0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80022e4:	6305      	str	r5, [r0, #48]	; 0x30
 80022e6:	1e7b      	subs	r3, r7, #1
 80022e8:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80022ec:	4455      	add	r5, sl
 80022ee:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80022f0:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022f4:	7859      	ldrb	r1, [r3, #1]
 80022f6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80022fa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80022fe:	b109      	cbz	r1, 8002304 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002300:	42bb      	cmp	r3, r7
 8002302:	d1f7      	bne.n	80022f4 <xTaskCreate+0x40>
 8002304:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002306:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800230a:	1d27      	adds	r7, r4, #4
 800230c:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800230e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002312:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8002314:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8002318:	bf28      	it	cs
 800231a:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 800231c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800231e:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002320:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002324:	f7ff fde7 	bl	8001ef6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002328:	f104 0018 	add.w	r0, r4, #24
 800232c:	f7ff fde3 	bl	8001ef6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002330:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002334:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002336:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002338:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800233a:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800233c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800233e:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002340:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002344:	f7ff fe44 	bl	8001fd0 <pxPortInitialiseStack>
 8002348:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800234a:	b106      	cbz	r6, 800234e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800234c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800234e:	f7ff fe69 	bl	8002024 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002352:	4b32      	ldr	r3, [pc, #200]	; (800241c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002354:	4e32      	ldr	r6, [pc, #200]	; (8002420 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800244c <xTaskCreate+0x198>
 800235c:	3201      	adds	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002360:	6835      	ldr	r5, [r6, #0]
 8002362:	2d00      	cmp	r5, #0
 8002364:	d14e      	bne.n	8002404 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002366:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d11d      	bne.n	80023aa <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800236e:	eb08 0005 	add.w	r0, r8, r5
 8002372:	3514      	adds	r5, #20
 8002374:	f7ff fdb4 	bl	8001ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002378:	2d8c      	cmp	r5, #140	; 0x8c
 800237a:	d1f8      	bne.n	800236e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800237c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002450 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002380:	4d28      	ldr	r5, [pc, #160]	; (8002424 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002382:	4648      	mov	r0, r9
 8002384:	f7ff fdac 	bl	8001ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002388:	4628      	mov	r0, r5
 800238a:	f7ff fda9 	bl	8001ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800238e:	4826      	ldr	r0, [pc, #152]	; (8002428 <xTaskCreate+0x174>)
 8002390:	f7ff fda6 	bl	8001ee0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002394:	4825      	ldr	r0, [pc, #148]	; (800242c <xTaskCreate+0x178>)
 8002396:	f7ff fda3 	bl	8001ee0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800239a:	4825      	ldr	r0, [pc, #148]	; (8002430 <xTaskCreate+0x17c>)
 800239c:	f7ff fda0 	bl	8001ee0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <xTaskCreate+0x180>)
 80023a2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <xTaskCreate+0x184>)
 80023a8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80023aa:	4a24      	ldr	r2, [pc, #144]	; (800243c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80023ac:	2501      	movs	r5, #1
 80023ae:	4924      	ldr	r1, [pc, #144]	; (8002440 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80023b0:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023b2:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80023b4:	3301      	adds	r3, #1
 80023b6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80023b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023ba:	fa05 f302 	lsl.w	r3, r5, r2
 80023be:	4303      	orrs	r3, r0
 80023c0:	2014      	movs	r0, #20
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	4639      	mov	r1, r7
 80023c6:	fb00 8002 	mla	r0, r0, r2, r8
 80023ca:	f7ff fd97 	bl	8001efc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80023ce:	f7ff fe4f 	bl	8002070 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <xTaskCreate+0x190>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b163      	cbz	r3, 80023f2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023d8:	6833      	ldr	r3, [r6, #0]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d207      	bcs.n	80023f2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <xTaskCreate+0x194>)
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	f3bf 8f6f 	isb	sy
	}
 80023f2:	4628      	mov	r0, r5
 80023f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80023f8:	4628      	mov	r0, r5
 80023fa:	f7ff fd35 	bl	8001e68 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023fe:	f04f 35ff 	mov.w	r5, #4294967295
 8002402:	e7f6      	b.n	80023f2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <xTaskCreate+0x190>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ce      	bne.n	80023aa <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800240c:	6833      	ldr	r3, [r6, #0]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002412:	429a      	cmp	r2, r3
 8002414:	d8c9      	bhi.n	80023aa <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8002416:	6034      	str	r4, [r6, #0]
 8002418:	e7c7      	b.n	80023aa <xTaskCreate+0xf6>
 800241a:	bf00      	nop
 800241c:	20003ce8 	.word	0x20003ce8
 8002420:	20003c50 	.word	0x20003c50
 8002424:	20003d14 	.word	0x20003d14
 8002428:	20003d34 	.word	0x20003d34
 800242c:	20003d60 	.word	0x20003d60
 8002430:	20003d4c 	.word	0x20003d4c
 8002434:	20003c54 	.word	0x20003c54
 8002438:	20003c58 	.word	0x20003c58
 800243c:	20003cf8 	.word	0x20003cf8
 8002440:	20003cfc 	.word	0x20003cfc
 8002444:	20003d48 	.word	0x20003d48
 8002448:	e000ed04 	.word	0xe000ed04
 800244c:	20003c5c 	.word	0x20003c5c
 8002450:	20003d00 	.word	0x20003d00

08002454 <vTaskStartScheduler>:
{
 8002454:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <vTaskStartScheduler+0x68>)
 8002458:	2400      	movs	r4, #0
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	4918      	ldr	r1, [pc, #96]	; (80024c0 <vTaskStartScheduler+0x6c>)
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	4623      	mov	r3, r4
 8002462:	9400      	str	r4, [sp, #0]
 8002464:	4817      	ldr	r0, [pc, #92]	; (80024c4 <vTaskStartScheduler+0x70>)
 8002466:	f7ff ff25 	bl	80022b4 <xTaskCreate>
	if( xReturn == pdPASS )
 800246a:	2801      	cmp	r0, #1
 800246c:	d116      	bne.n	800249c <vTaskStartScheduler+0x48>
	__asm volatile
 800246e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002472:	b672      	cpsid	i
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8002482:	f04f 32ff 	mov.w	r2, #4294967295
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <vTaskStartScheduler+0x74>)
 8002488:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800248a:	4b10      	ldr	r3, [pc, #64]	; (80024cc <vTaskStartScheduler+0x78>)
 800248c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800248e:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <vTaskStartScheduler+0x7c>)
 8002490:	601c      	str	r4, [r3, #0]
}
 8002492:	b002      	add	sp, #8
 8002494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002498:	f7ff be60 	b.w	800215c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800249c:	3001      	adds	r0, #1
 800249e:	d10a      	bne.n	80024b6 <vTaskStartScheduler+0x62>
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	b672      	cpsid	i
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	b662      	cpsie	i
 80024b4:	e7fe      	b.n	80024b4 <vTaskStartScheduler+0x60>
}
 80024b6:	b002      	add	sp, #8
 80024b8:	bd10      	pop	{r4, pc}
 80024ba:	bf00      	nop
 80024bc:	20003d28 	.word	0x20003d28
 80024c0:	08002e38 	.word	0x08002e38
 80024c4:	0800274d 	.word	0x0800274d
 80024c8:	20003d2c 	.word	0x20003d2c
 80024cc:	20003d48 	.word	0x20003d48
 80024d0:	20003d74 	.word	0x20003d74

080024d4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80024d4:	4a02      	ldr	r2, [pc, #8]	; (80024e0 <vTaskSuspendAll+0xc>)
 80024d6:	6813      	ldr	r3, [r2, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20003cf4 	.word	0x20003cf4

080024e4 <xTaskIncrementTick>:
{
 80024e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024e8:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <xTaskIncrementTick+0xfc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d155      	bne.n	800259c <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 80024f0:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <xTaskIncrementTick+0x100>)
 80024f2:	681c      	ldr	r4, [r3, #0]
 80024f4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80024f6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80024f8:	b9cc      	cbnz	r4, 800252e <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <xTaskIncrementTick+0x104>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	b152      	cbz	r2, 8002518 <xTaskIncrementTick+0x34>
 8002502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002506:	b672      	cpsid	i
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	b662      	cpsie	i
 8002516:	e7fe      	b.n	8002516 <xTaskIncrementTick+0x32>
 8002518:	4a34      	ldr	r2, [pc, #208]	; (80025ec <xTaskIncrementTick+0x108>)
 800251a:	6819      	ldr	r1, [r3, #0]
 800251c:	6810      	ldr	r0, [r2, #0]
 800251e:	6018      	str	r0, [r3, #0]
 8002520:	6011      	str	r1, [r2, #0]
 8002522:	4a33      	ldr	r2, [pc, #204]	; (80025f0 <xTaskIncrementTick+0x10c>)
 8002524:	6813      	ldr	r3, [r2, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	f7ff fe6b 	bl	8002204 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800252e:	4d31      	ldr	r5, [pc, #196]	; (80025f4 <xTaskIncrementTick+0x110>)
 8002530:	f04f 0b00 	mov.w	fp, #0
 8002534:	4f30      	ldr	r7, [pc, #192]	; (80025f8 <xTaskIncrementTick+0x114>)
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	429c      	cmp	r4, r3
 800253a:	d33e      	bcc.n	80025ba <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800253c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80025e8 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8002540:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002608 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002544:	f8d8 2000 	ldr.w	r2, [r8]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	bb72      	cbnz	r2, 80025aa <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	602a      	str	r2, [r5, #0]
					break;
 8002552:	e032      	b.n	80025ba <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002554:	f106 0a04 	add.w	sl, r6, #4
 8002558:	4650      	mov	r0, sl
 800255a:	f7ff fcf2 	bl	8001f42 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800255e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002560:	b119      	cbz	r1, 800256a <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002562:	f106 0018 	add.w	r0, r6, #24
 8002566:	f7ff fcec 	bl	8001f42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800256a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800256c:	2201      	movs	r2, #1
 800256e:	f8d9 3000 	ldr.w	r3, [r9]
 8002572:	f04f 0e14 	mov.w	lr, #20
 8002576:	fa02 f100 	lsl.w	r1, r2, r0
 800257a:	4319      	orrs	r1, r3
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <xTaskIncrementTick+0x118>)
 800257e:	f8c9 1000 	str.w	r1, [r9]
 8002582:	4651      	mov	r1, sl
 8002584:	fb0e 3000 	mla	r0, lr, r0, r3
 8002588:	f7ff fcb8 	bl	8001efc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002590:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002592:	4291      	cmp	r1, r2
 8002594:	bf28      	it	cs
 8002596:	f04f 0b01 	movcs.w	fp, #1
 800259a:	e7d3      	b.n	8002544 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800259e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80025a2:	6813      	ldr	r3, [r2, #0]
 80025a4:	3301      	adds	r3, #1
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e011      	b.n	80025ce <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025aa:	f8d8 2000 	ldr.w	r2, [r8]
 80025ae:	68d2      	ldr	r2, [r2, #12]
 80025b0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80025b2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80025b4:	428c      	cmp	r4, r1
 80025b6:	d2cd      	bcs.n	8002554 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80025b8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <xTaskIncrementTick+0x118>)
 80025be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025c0:	2214      	movs	r2, #20
 80025c2:	434a      	muls	r2, r1
 80025c4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80025c6:	2a02      	cmp	r2, #2
 80025c8:	bf28      	it	cs
 80025ca:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <xTaskIncrementTick+0x120>)
 80025d0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	bf18      	it	ne
 80025d6:	f04f 0b01 	movne.w	fp, #1
}
 80025da:	4658      	mov	r0, fp
 80025dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e0:	20003cf4 	.word	0x20003cf4
 80025e4:	20003d74 	.word	0x20003d74
 80025e8:	20003c54 	.word	0x20003c54
 80025ec:	20003c58 	.word	0x20003c58
 80025f0:	20003d30 	.word	0x20003d30
 80025f4:	20003d2c 	.word	0x20003d2c
 80025f8:	20003c50 	.word	0x20003c50
 80025fc:	20003c5c 	.word	0x20003c5c
 8002600:	20003cf0 	.word	0x20003cf0
 8002604:	20003d78 	.word	0x20003d78
 8002608:	20003cfc 	.word	0x20003cfc

0800260c <xTaskResumeAll>:
{
 800260c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002610:	4c32      	ldr	r4, [pc, #200]	; (80026dc <xTaskResumeAll+0xd0>)
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	b953      	cbnz	r3, 800262c <xTaskResumeAll+0x20>
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	b672      	cpsid	i
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	b662      	cpsie	i
 800262a:	e7fe      	b.n	800262a <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 800262c:	f7ff fcfa 	bl	8002024 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002636:	6824      	ldr	r4, [r4, #0]
 8002638:	b12c      	cbz	r4, 8002646 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 800263a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800263c:	f7ff fd18 	bl	8002070 <vPortExitCritical>
}
 8002640:	4620      	mov	r0, r4
 8002642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <xTaskResumeAll+0xd4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f5      	beq.n	800263a <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800264e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80026f8 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8002652:	4f24      	ldr	r7, [pc, #144]	; (80026e4 <xTaskResumeAll+0xd8>)
 8002654:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80026fc <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002658:	f8d9 3000 	ldr.w	r3, [r9]
 800265c:	b9e3      	cbnz	r3, 8002698 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800265e:	b10c      	cbz	r4, 8002664 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8002660:	f7ff fdd0 	bl	8002204 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002664:	4d20      	ldr	r5, [pc, #128]	; (80026e8 <xTaskResumeAll+0xdc>)
 8002666:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002668:	b144      	cbz	r4, 800267c <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 800266a:	4e20      	ldr	r6, [pc, #128]	; (80026ec <xTaskResumeAll+0xe0>)
 800266c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800266e:	f7ff ff39 	bl	80024e4 <xTaskIncrementTick>
 8002672:	b100      	cbz	r0, 8002676 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8002674:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002676:	3c01      	subs	r4, #1
 8002678:	d1f9      	bne.n	800266e <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 800267a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <xTaskResumeAll+0xe0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0da      	beq.n	800263a <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8002684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <xTaskResumeAll+0xe4>)
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002694:	2401      	movs	r4, #1
 8002696:	e7d1      	b.n	800263c <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002698:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800269c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800269e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a0:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a2:	f104 0018 	add.w	r0, r4, #24
 80026a6:	f7ff fc4c 	bl	8001f42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026aa:	4630      	mov	r0, r6
 80026ac:	f7ff fc49 	bl	8001f42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026b2:	6839      	ldr	r1, [r7, #0]
 80026b4:	2014      	movs	r0, #20
 80026b6:	fa05 f302 	lsl.w	r3, r5, r2
 80026ba:	fb00 8002 	mla	r0, r0, r2, r8
 80026be:	430b      	orrs	r3, r1
 80026c0:	4631      	mov	r1, r6
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	f7ff fc1a 	bl	8001efc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <xTaskResumeAll+0xe8>)
 80026ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d3c1      	bcc.n	8002658 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <xTaskResumeAll+0xe0>)
 80026d6:	601d      	str	r5, [r3, #0]
 80026d8:	e7be      	b.n	8002658 <xTaskResumeAll+0x4c>
 80026da:	bf00      	nop
 80026dc:	20003cf4 	.word	0x20003cf4
 80026e0:	20003ce8 	.word	0x20003ce8
 80026e4:	20003cfc 	.word	0x20003cfc
 80026e8:	20003cf0 	.word	0x20003cf0
 80026ec:	20003d78 	.word	0x20003d78
 80026f0:	e000ed04 	.word	0xe000ed04
 80026f4:	20003c50 	.word	0x20003c50
 80026f8:	20003d34 	.word	0x20003d34
 80026fc:	20003c5c 	.word	0x20003c5c

08002700 <vTaskDelay>:
	{
 8002700:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002702:	b940      	cbnz	r0, 8002716 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <vTaskDelay+0x44>)
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <vTaskDelay+0x48>)
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	b151      	cbz	r1, 8002732 <vTaskDelay+0x32>
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	b672      	cpsid	i
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	b662      	cpsie	i
 8002730:	e7fe      	b.n	8002730 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002732:	f7ff fecf 	bl	80024d4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002736:	f7ff fd77 	bl	8002228 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800273a:	f7ff ff67 	bl	800260c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800273e:	2800      	cmp	r0, #0
 8002740:	d0e0      	beq.n	8002704 <vTaskDelay+0x4>
 8002742:	bd08      	pop	{r3, pc}
 8002744:	e000ed04 	.word	0xe000ed04
 8002748:	20003cf4 	.word	0x20003cf4

0800274c <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800274c:	4e17      	ldr	r6, [pc, #92]	; (80027ac <prvIdleTask+0x60>)
{
 800274e:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002750:	4c17      	ldr	r4, [pc, #92]	; (80027b0 <prvIdleTask+0x64>)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	b963      	cbnz	r3, 8002770 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002756:	4b17      	ldr	r3, [pc, #92]	; (80027b4 <prvIdleTask+0x68>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d9f8      	bls.n	8002750 <prvIdleTask+0x4>
				taskYIELD();
 800275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <prvIdleTask+0x6c>)
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	e7ef      	b.n	8002750 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002770:	f7ff feb0 	bl	80024d4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002774:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002776:	f7ff ff49 	bl	800260c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800277a:	2d00      	cmp	r5, #0
 800277c:	d0e9      	beq.n	8002752 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800277e:	f7ff fc51 	bl	8002024 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002782:	68f3      	ldr	r3, [r6, #12]
 8002784:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002786:	1d28      	adds	r0, r5, #4
 8002788:	f7ff fbdb 	bl	8001f42 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800278c:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <prvIdleTask+0x70>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002794:	6823      	ldr	r3, [r4, #0]
 8002796:	3b01      	subs	r3, #1
 8002798:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800279a:	f7ff fc69 	bl	8002070 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800279e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80027a0:	f7ff fb62 	bl	8001e68 <vPortFree>
			vPortFree( pxTCB );
 80027a4:	4628      	mov	r0, r5
 80027a6:	f7ff fb5f 	bl	8001e68 <vPortFree>
 80027aa:	e7d2      	b.n	8002752 <prvIdleTask+0x6>
 80027ac:	20003d60 	.word	0x20003d60
 80027b0:	20003cec 	.word	0x20003cec
 80027b4:	20003c5c 	.word	0x20003c5c
 80027b8:	e000ed04 	.word	0xe000ed04
 80027bc:	20003ce8 	.word	0x20003ce8

080027c0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <vTaskSwitchContext+0x64>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4b18      	ldr	r3, [pc, #96]	; (8002828 <vTaskSwitchContext+0x68>)
{
 80027c6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027c8:	b112      	cbz	r2, 80027d0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80027ca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80027d0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80027d2:	4b16      	ldr	r3, [pc, #88]	; (800282c <vTaskSwitchContext+0x6c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2214      	movs	r2, #20
 80027de:	4914      	ldr	r1, [pc, #80]	; (8002830 <vTaskSwitchContext+0x70>)
 80027e0:	f1c3 031f 	rsb	r3, r3, #31
 80027e4:	435a      	muls	r2, r3
 80027e6:	588c      	ldr	r4, [r1, r2]
 80027e8:	1888      	adds	r0, r1, r2
 80027ea:	b954      	cbnz	r4, 8002802 <vTaskSwitchContext+0x42>
	__asm volatile
 80027ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f0:	b672      	cpsid	i
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	b662      	cpsie	i
 8002800:	e7fe      	b.n	8002800 <vTaskSwitchContext+0x40>
 8002802:	6844      	ldr	r4, [r0, #4]
 8002804:	3208      	adds	r2, #8
 8002806:	6864      	ldr	r4, [r4, #4]
 8002808:	440a      	add	r2, r1
 800280a:	4294      	cmp	r4, r2
 800280c:	6044      	str	r4, [r0, #4]
 800280e:	bf04      	itt	eq
 8002810:	6862      	ldreq	r2, [r4, #4]
 8002812:	6042      	streq	r2, [r0, #4]
 8002814:	2214      	movs	r2, #20
 8002816:	fb02 1303 	mla	r3, r2, r3, r1
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b05      	ldr	r3, [pc, #20]	; (8002834 <vTaskSwitchContext+0x74>)
 8002820:	e7d4      	b.n	80027cc <vTaskSwitchContext+0xc>
 8002822:	bf00      	nop
 8002824:	20003cf4 	.word	0x20003cf4
 8002828:	20003d78 	.word	0x20003d78
 800282c:	20003cfc 	.word	0x20003cfc
 8002830:	20003c5c 	.word	0x20003c5c
 8002834:	20003c50 	.word	0x20003c50

08002838 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <xTaskGetSchedulerState+0x18>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b133      	cbz	r3, 800284c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <xTaskGetSchedulerState+0x1c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002844:	bf0c      	ite	eq
 8002846:	2002      	moveq	r0, #2
 8002848:	2000      	movne	r0, #0
 800284a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800284c:	2001      	movs	r0, #1
	}
 800284e:	4770      	bx	lr
 8002850:	20003d48 	.word	0x20003d48
 8002854:	20003cf4 	.word	0x20003cf4

08002858 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002858:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800285a:	2001      	movs	r0, #1
 800285c:	f7ff fa3b 	bl	8001cd6 <osDelay>
 8002860:	e7fb      	b.n	800285a <StartDefaultTask+0x2>
	...

08002864 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002864:	b530      	push	{r4, r5, lr}
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002866:	4d07      	ldr	r5, [pc, #28]	; (8002884 <MX_FREERTOS_Init+0x20>)
void MX_FREERTOS_Init(void) {
 8002868:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800286a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800286c:	ac01      	add	r4, sp, #4
 800286e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002870:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002872:	2100      	movs	r1, #0
 8002874:	a801      	add	r0, sp, #4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002876:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002878:	f7ff fa15 	bl	8001ca6 <osThreadCreate>
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <MX_FREERTOS_Init+0x24>)
 800287e:	6018      	str	r0, [r3, #0]
}
 8002880:	b007      	add	sp, #28
 8002882:	bd30      	pop	{r4, r5, pc}
 8002884:	08002e24 	.word	0x08002e24
 8002888:	20003d7c 	.word	0x20003d7c

0800288c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800288c:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <MX_GPIO_Init+0x1a0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800288e:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002892:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002896:	f042 0204 	orr.w	r2, r2, #4
{
 800289a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
{
 80028a2:	b08c      	sub	sp, #48	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80028aa:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8002a3c <MX_GPIO_Init+0x1b0>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80028ae:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	f002 0204 	and.w	r2, r2, #4
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80028b6:	4e5e      	ldr	r6, [pc, #376]	; (8002a30 <MX_GPIO_Init+0x1a4>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80028b8:	4640      	mov	r0, r8
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80028ba:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002a40 <MX_GPIO_Init+0x1b4>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	9201      	str	r2, [sp, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c2:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028c4:	270b      	movs	r7, #11
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80028d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80028da:	9202      	str	r2, [sp, #8]
 80028dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80028ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028ee:	f002 0201 	and.w	r2, r2, #1
 80028f2:	9203      	str	r2, [sp, #12]
 80028f4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028fa:	f042 0202 	orr.w	r2, r2, #2
 80028fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002902:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002906:	f002 0202 	and.w	r2, r2, #2
 800290a:	9204      	str	r2, [sp, #16]
 800290c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800290e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002912:	f042 0208 	orr.w	r2, r2, #8
 8002916:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800291a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800291e:	f002 0208 	and.w	r2, r2, #8
 8002922:	9205      	str	r2, [sp, #20]
 8002924:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002926:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800292a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800292e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293c:	9306      	str	r3, [sp, #24]
 800293e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002940:	f7fd fe54 	bl	80005ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002944:	2200      	movs	r2, #0
 8002946:	4630      	mov	r0, r6
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	f7fd fe4f 	bl	80005ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <MX_GPIO_Init+0x1a8>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002950:	a907      	add	r1, sp, #28
 8002952:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002954:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002958:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800295c:	f7fd fd5c 	bl	8000418 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002960:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002962:	a907      	add	r1, sp, #28
 8002964:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800296a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002972:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002974:	f7fd fd50 	bl	8000418 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002978:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	a907      	add	r1, sp, #28
 800297c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002980:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002986:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f7fd fd46 	bl	8000418 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800298c:	a907      	add	r1, sp, #28
 800298e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002990:	f8cd a01c 	str.w	sl, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002994:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800299e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f7fd fd3a 	bl	8000418 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80029a4:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a8:	a907      	add	r1, sp, #28
 80029aa:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80029b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b6:	f7fd fd2f 	bl	8000418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029ba:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029be:	a907      	add	r1, sp, #28
 80029c0:	481d      	ldr	r0, [pc, #116]	; (8002a38 <MX_GPIO_Init+0x1ac>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80029c2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c4:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029c8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029ce:	f7fd fd23 	bl	8000418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80029d2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029d4:	a907      	add	r1, sp, #28
 80029d6:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80029dc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f7fd fd19 	bl	8000418 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029e6:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029e8:	a907      	add	r1, sp, #28
 80029ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ec:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80029ee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80029f2:	f7fd fd11 	bl	8000418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80029f6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	a907      	add	r1, sp, #28
 80029fc:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002a00:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002a02:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002a06:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0a:	f7fd fd05 	bl	8000418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a12:	a907      	add	r1, sp, #28
 8002a14:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002a18:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a1e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a20:	f7fd fcfa 	bl	8000418 <HAL_GPIO_Init>

}
 8002a24:	b00c      	add	sp, #48	; 0x30
 8002a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a2a:	bf00      	nop
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	58021800 	.word	0x58021800
 8002a34:	11110000 	.word	0x11110000
 8002a38:	58020c00 	.word	0x58020c00
 8002a3c:	58020400 	.word	0x58020400
 8002a40:	58020800 	.word	0x58020800

08002a44 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002a44:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 8002a46:	4815      	ldr	r0, [pc, #84]	; (8002a9c <MX_I2C1_Init+0x58>)
  hi2c1.Init.Timing = 0x10909CEC;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a48:	2201      	movs	r2, #1
  hi2c1.Init.Timing = 0x10909CEC;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <MX_I2C1_Init+0x5c>)
 8002a4c:	4915      	ldr	r1, [pc, #84]	; (8002aa4 <MX_I2C1_Init+0x60>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a4e:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.Timing = 0x10909CEC;
 8002a50:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.OwnAddress1 = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	6083      	str	r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a58:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a5a:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a5c:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a5e:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a60:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a62:	f7fd fdc8 	bl	80005f6 <HAL_I2C_Init>
 8002a66:	b118      	cbz	r0, 8002a70 <MX_I2C1_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a68:	214c      	movs	r1, #76	; 0x4c
 8002a6a:	480f      	ldr	r0, [pc, #60]	; (8002aa8 <MX_I2C1_Init+0x64>)
 8002a6c:	f000 f8c0 	bl	8002bf0 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a70:	2100      	movs	r1, #0
 8002a72:	480a      	ldr	r0, [pc, #40]	; (8002a9c <MX_I2C1_Init+0x58>)
 8002a74:	f7fd fe10 	bl	8000698 <HAL_I2CEx_ConfigAnalogFilter>
 8002a78:	b118      	cbz	r0, 8002a82 <MX_I2C1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a7a:	2153      	movs	r1, #83	; 0x53
 8002a7c:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <MX_I2C1_Init+0x64>)
 8002a7e:	f000 f8b7 	bl	8002bf0 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a82:	2100      	movs	r1, #0
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_I2C1_Init+0x58>)
 8002a86:	f7fd fe2d 	bl	80006e4 <HAL_I2CEx_ConfigDigitalFilter>
 8002a8a:	b128      	cbz	r0, 8002a98 <MX_I2C1_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002a8c:	215a      	movs	r1, #90	; 0x5a
 8002a8e:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <MX_I2C1_Init+0x64>)
  }

}
 8002a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8002a94:	f000 b8ac 	b.w	8002bf0 <_Error_Handler>
 8002a98:	bd08      	pop	{r3, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20003d80 	.word	0x20003d80
 8002aa0:	10909cec 	.word	0x10909cec
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	08002e49 	.word	0x08002e49

08002aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002aac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_I2C_MspInit+0x48>)
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11b      	bne.n	8002aee <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aba:	480f      	ldr	r0, [pc, #60]	; (8002af8 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002abc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ac8:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aca:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ace:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f7fd fca2 	bl	8000418 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_I2C_MspInit+0x50>)
 8002ad6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002ada:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002ade:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002aee:	b007      	add	sp, #28
 8002af0:	f85d fb04 	ldr.w	pc, [sp], #4
 8002af4:	40005400 	.word	0x40005400
 8002af8:	58020400 	.word	0x58020400
 8002afc:	58024400 	.word	0x58024400

08002b00 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Supply configuration update enable 
    */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002b00:	4b2d      	ldr	r3, [pc, #180]	; (8002bb8 <SystemClock_Config+0xb8>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	f022 0204 	bic.w	r2, r2, #4
{
 8002b08:	b530      	push	{r4, r5, lr}
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002b0a:	60da      	str	r2, [r3, #12]
{
 8002b0c:	b0cd      	sub	sp, #308	; 0x134

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	9201      	str	r2, [sp, #4]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b1c:	619a      	str	r2, [r3, #24]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002b24:	9201      	str	r2, [sp, #4]
 8002b26:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	0492      	lsls	r2, r2, #18
 8002b2c:	d5fc      	bpl.n	8002b28 <SystemClock_Config+0x28>
  }
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002b2e:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b30:	210a      	movs	r1, #10
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b32:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b34:	2404      	movs	r4, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002b36:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002b38:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b3a:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b3c:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b3e:	210c      	movs	r1, #12
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b40:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b42:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002b44:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b46:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b48:	9214      	str	r2, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b4a:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b4c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b4e:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b50:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b52:	911a      	str	r1, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8002b54:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b56:	921c      	str	r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b58:	f7fd fdea 	bl	8000730 <HAL_RCC_OscConfig>
 8002b5c:	b100      	cbz	r0, 8002b60 <SystemClock_Config+0x60>
 8002b5e:	e7fe      	b.n	8002b5e <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b60:	233f      	movs	r3, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b62:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002b64:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b66:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b68:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b6a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002b6c:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002b6e:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002b70:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002b72:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b74:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b76:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002b78:	f7fe f8c0 	bl	8000cfc <HAL_RCC_ClockConfig>
 8002b7c:	b100      	cbz	r0, 8002b80 <SystemClock_Config+0x80>
 8002b7e:	e7fe      	b.n	8002b7e <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b80:	2308      	movs	r3, #8
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b82:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b84:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b86:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b88:	f7fe fab8 	bl	80010fc <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	b100      	cbz	r0, 8002b92 <SystemClock_Config+0x92>
 8002b90:	e7fe      	b.n	8002b90 <SystemClock_Config+0x90>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SystemClock_Config+0xbc>)
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b9e:	f7fd fc19 	bl	80003d4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7fd fc2c 	bl	8000400 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002ba8:	462a      	mov	r2, r5
 8002baa:	210f      	movs	r1, #15
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	f7fd fbca 	bl	8000348 <HAL_NVIC_SetPriority>
}
 8002bb4:	b04d      	add	sp, #308	; 0x134
 8002bb6:	bd30      	pop	{r4, r5, pc}
 8002bb8:	58024800 	.word	0x58024800
 8002bbc:	20000008 	.word	0x20000008

08002bc0 <main>:
{
 8002bc0:	b508      	push	{r3, lr}
  HAL_Init();
 8002bc2:	f7fd fb8d 	bl	80002e0 <HAL_Init>
  SystemClock_Config();
 8002bc6:	f7ff ff9b 	bl	8002b00 <SystemClock_Config>
  MX_GPIO_Init();
 8002bca:	f7ff fe5f 	bl	800288c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bce:	f7ff ff39 	bl	8002a44 <MX_I2C1_Init>
  MX_FREERTOS_Init();
 8002bd2:	f7ff fe47 	bl	8002864 <MX_FREERTOS_Init>
  osKernelStart();
 8002bd6:	f7ff f861 	bl	8001c9c <osKernelStart>
 8002bda:	e7fe      	b.n	8002bda <main+0x1a>

08002bdc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002bdc:	6802      	ldr	r2, [r0, #0]
 8002bde:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8002be4:	f7fd bb8c 	b.w	8000300 <HAL_IncTick>
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	40010000 	.word	0x40010000

08002bf0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002bf0:	e7fe      	b.n	8002bf0 <_Error_Handler>
	...

08002bf4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <HAL_MspInit+0x7c>)
{
 8002bf6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfc:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfe:	f042 0202 	orr.w	r2, r2, #2
 8002c02:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c12:	f7fd fb87 	bl	8000324 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	f06f 000b 	mvn.w	r0, #11
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	f7fd fb93 	bl	8000348 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	f06f 000a 	mvn.w	r0, #10
 8002c28:	4611      	mov	r1, r2
 8002c2a:	f7fd fb8d 	bl	8000348 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f06f 0009 	mvn.w	r0, #9
 8002c34:	4611      	mov	r1, r2
 8002c36:	f7fd fb87 	bl	8000348 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f06f 0004 	mvn.w	r0, #4
 8002c40:	4611      	mov	r1, r2
 8002c42:	f7fd fb81 	bl	8000348 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	f06f 0003 	mvn.w	r0, #3
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f7fd fb7b 	bl	8000348 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	210f      	movs	r1, #15
 8002c56:	f06f 0001 	mvn.w	r0, #1
 8002c5a:	f7fd fb75 	bl	8000348 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	210f      	movs	r1, #15
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	f7fd fb6f 	bl	8000348 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c6a:	b003      	add	sp, #12
 8002c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c70:	58024400 	.word	0x58024400

08002c74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c74:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002c76:	4601      	mov	r1, r0
{
 8002c78:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2019      	movs	r0, #25
 8002c7e:	f7fd fb63 	bl	8000348 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002c82:	2019      	movs	r0, #25
 8002c84:	f7fd fb98 	bl	80003b8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <HAL_InitTick+0x6c>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c8a:	4669      	mov	r1, sp
 8002c8c:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c92:	4c14      	ldr	r4, [pc, #80]	; (8002ce4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ca8:	f7fe f932 	bl	8000f10 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002cac:	f7fe f91a 	bl	8000ee4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_InitTick+0x74>)
 8002cb2:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002cb4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002cb8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_InitTick+0x78>)
 8002cbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8002cc0:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8002cc2:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cc4:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002cc6:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002cc8:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cca:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ccc:	f7fe ffca 	bl	8001c64 <HAL_TIM_Base_Init>
 8002cd0:	b920      	cbnz	r0, 8002cdc <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	f7fe fe9d 	bl	8001a12 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002cd8:	b00a      	add	sp, #40	; 0x28
 8002cda:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e7fb      	b.n	8002cd8 <HAL_InitTick+0x64>
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	20003dcc 	.word	0x20003dcc
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	000f4240 	.word	0x000f4240

08002cf0 <NMI_Handler>:
 8002cf0:	4770      	bx	lr

08002cf2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002cf2:	e7fe      	b.n	8002cf2 <HardFault_Handler>

08002cf4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002cf4:	e7fe      	b.n	8002cf4 <MemManage_Handler>

08002cf6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002cf6:	e7fe      	b.n	8002cf6 <BusFault_Handler>

08002cf8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002cf8:	e7fe      	b.n	8002cf8 <UsageFault_Handler>

08002cfa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002cfa:	4770      	bx	lr

08002cfc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8002cfc:	f7fe bff3 	b.w	8001ce6 <osSystickHandler>

08002d00 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d00:	4801      	ldr	r0, [pc, #4]	; (8002d08 <TIM1_UP_IRQHandler+0x8>)
 8002d02:	f7fe be96 	b.w	8001a32 <HAL_TIM_IRQHandler>
 8002d06:	bf00      	nop
 8002d08:	20003dcc 	.word	0x20003dcc

08002d0c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d0c:	4914      	ldr	r1, [pc, #80]	; (8002d60 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002d0e:	4815      	ldr	r0, [pc, #84]	; (8002d64 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d10:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002d18:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <SystemInit+0x5c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002d28:	2200      	movs	r2, #0
 8002d2a:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002d2c:	681c      	ldr	r4, [r3, #0]
 8002d2e:	4020      	ands	r0, r4
 8002d30:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d36:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002d4e:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002d52:	2201      	movs	r2, #1
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SystemInit+0x60>)
 8002d56:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5c:	608b      	str	r3, [r1, #8]
 8002d5e:	bd10      	pop	{r4, pc}
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	51008108 	.word	0x51008108

08002d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002da8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d76:	e003      	b.n	8002d80 <LoopCopyDataInit>

08002d78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d7e:	3104      	adds	r1, #4

08002d80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d80:	480b      	ldr	r0, [pc, #44]	; (8002db0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d88:	d3f6      	bcc.n	8002d78 <CopyDataInit>
  ldr  r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d8c:	e002      	b.n	8002d94 <LoopFillZerobss>

08002d8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d90:	f842 3b04 	str.w	r3, [r2], #4

08002d94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d98:	d3f9      	bcc.n	8002d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d9a:	f7ff ffb7 	bl	8002d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f000 f811 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002da2:	f7ff ff0d 	bl	8002bc0 <main>
  bx  lr    
 8002da6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002da8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002dac:	08002e70 	.word	0x08002e70
  ldr  r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002db4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002db8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002dbc:	20003e0c 	.word	0x20003e0c

08002dc0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC3_IRQHandler>
	...

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4e0d      	ldr	r6, [pc, #52]	; (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	; (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1ba4      	subs	r4, r4, r6
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2500      	movs	r5, #0
 8002dd0:	42a5      	cmp	r5, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4e0b      	ldr	r6, [pc, #44]	; (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	; (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 f818 	bl	8002e0c <_init>
 8002ddc:	1ba4      	subs	r4, r4, r6
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2500      	movs	r5, #0
 8002de2:	42a5      	cmp	r5, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dec:	4798      	blx	r3
 8002dee:	3501      	adds	r5, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002df6:	4798      	blx	r3
 8002df8:	3501      	adds	r5, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	08002e68 	.word	0x08002e68
 8002e00:	08002e68 	.word	0x08002e68
 8002e04:	08002e68 	.word	0x08002e68
 8002e08:	08002e6c 	.word	0x08002e6c

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
